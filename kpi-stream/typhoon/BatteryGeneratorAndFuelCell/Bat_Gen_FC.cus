<ui_settings>
    <version>2.5</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#d8d8d8</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

]]></initialization_code>
    <components>
        <component_data>
                <id>5c98609297b611e9acfbf8da0c5ce7d2</id>
                <name><![CDATA[Image component]]></name>
                <type>Image</type>
                <description><![CDATA[]]></description>
                <image><![CDATA[Capture.JPG]]></image>
                <image_scaling><![CDATA[Without scaling]]></image_scaling>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>1804</width>
                    <height>1060</height>
                    <background_color><![CDATA[#ffffff]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <is_background>True</is_background>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db2534097b811e98095f8da0c5ce7d2</id>
                <name><![CDATA[Microgrid Controller]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['6db2534197b811e9828ff8da0c5ce7d2', '6db2534297b811e99778f8da0c5ce7d2', '6db27a3a97b811e9a23cf8da0c5ce7d2', '6db27a3b97b811e994ecf8da0c5ce7d2', '6db27a3c97b811e9b2dff8da0c5ce7d2', '6db27a3d97b811e998b6f8da0c5ce7d2', '6db27a3e97b811e9a798f8da0c5ce7d2', '6db27a3f97b811e9bf3df8da0c5ce7d2', '6db27a4097b811e9acadf8da0c5ce7d2', '61449adc9c1c11e9abb3f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffff7f</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>8.0</x>
                    <y>232.0</y>
                    <width>504</width>
                    <height>280</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db2534197b811e9828ff8da0c5ce7d2</id>
                <name><![CDATA[Reactive power offset]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = "Microgrid_controller.Qoff")
displayValue = P/1000.0

]]></code>
                <analog_signals><![CDATA[['PMS.Qoff']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248.0</x>
                    <y>96.0</y>
                    <width>264</width>
                    <height>152</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>6db2534297b811e99778f8da0c5ce7d2</id>
                <name><![CDATA[Active power offset]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = "Microgrid_controller.Poff")
displayValue = P/1000.0

]]></code>
                <analog_signals><![CDATA[['PMS.Poff']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>96.0</y>
                    <width>248</width>
                    <height>152</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3a97b811e9a23cf8da0c5ce7d2</id>
                <name><![CDATA[ Operation mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Grid Tied':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value('op_mode', 0.0)
    pass
elif inputValue == 'Islanded':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value('op_mode', 1.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Grid Tied'
hil.set_scada_input_value('op_mode', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Grid Tied]]></inputValue>
                <availableValues><![CDATA[['Grid Tied', 'Islanded']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>280.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3b97b811e994ecf8da0c5ce7d2</id>
                <name><![CDATA[ DER option]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Battery inverter':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value('c_option', 0.0)
    pass
elif inputValue == 'Diesel genset':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value('c_option', 1.0)
    pass
#elif inputValue == 'Desiel_8W00k':
    # do something when 'Case 2' is selected
#hil.set_scada_input_value('c_option', 2.0)
    #pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Battery inverter'
hil.set_scada_input_value('c_option', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Battery inverter]]></inputValue>
                <availableValues><![CDATA[['Battery inverter', 'Diesel genset']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>0.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3c97b811e9b2dff8da0c5ce7d2</id>
                <name><![CDATA[ Battery Inverter]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[PMS.cMode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = "Microgrid_controller.cMode")
displayValue = not(bool(x))
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>32.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3d97b811e998b6f8da0c5ce7d2</id>
                <name><![CDATA[Diesel]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[PMS.cMode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = "Microgrid_controller.cMode")
displayValue = bool(x)]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>136.0</x>
                    <y>32.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3e97b811e9a798f8da0c5ce7d2</id>
                <name><![CDATA[Islanded]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[PMS.cMode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = "Microgrid_controller.opMode")
displayValue = bool(x)]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>384.0</x>
                    <y>32.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a3f97b811e9bf3df8da0c5ce7d2</id>
                <name><![CDATA[Grid Tied]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[PMS.cMode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = "Microgrid_controller.opMode")
displayValue = not(bool(x))
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>32.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>6db27a4097b811e9acadf8da0c5ce7d2</id>
                <name><![CDATA[ DG_800kW]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Microgrid_controller.cMode')

displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>64.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288297b811e9a9d6f8da0c5ce7d2</id>
                <name><![CDATA[PCC monitor]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['9e16288397b811e9b18af8da0c5ce7d2', '9e16288497b811e9b692f8da0c5ce7d2', '9e16288597b811e9984df8da0c5ce7d2', '9e16288697b811e9875bf8da0c5ce7d2', '9e16288797b811e98709f8da0c5ce7d2', '9e16288897b811e9a202f8da0c5ce7d2', '9e164f7e97b811e9ae80f8da0c5ce7d2', '9e164f7f97b811e98420f8da0c5ce7d2', '9e164f8097b811e995c2f8da0c5ce7d2', '9e164f8197b811e990b7f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffff7f</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>1272.0</x>
                    <y>104.0</y>
                    <width>520</width>
                    <height>480</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288397b811e9b18af8da0c5ce7d2</id>
                <name><![CDATA[ Synch Check]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

import math
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
V1 = hil.read_analog_signal(name = "PCC_monitor.Synch_check.PLLs.VABC")
V2 = hil.read_analog_signal(name = "PCC_monitor.Synch_check.PLLs.Vabc")
phase = 180*hil.read_analog_signal(name = "PCC_monitor.Synch_check.check_phase_diff.phase_diff")/math.pi


if V1>0:
    alpha = 0
    beta = phase
else:
    alpha = 180
    beta = phase + 180
    


displayValue = [['VABC',alpha,abs(V1)],['Vabc',beta,abs(V2)]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[Battery Inverter 100 kW]]></magnitude_signal>
                        <phase_signal><![CDATA[Battery Inverter 100 kW]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>168.0</x>
                    <y>0.0</y>
                    <width>304</width>
                    <height>240</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9e16288497b811e9b692f8da0c5ce7d2</id>
                <name><![CDATA[PCC CB]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[PCC_monitor.S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>40.0</x>
                    <y>40.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288597b811e9984df8da0c5ce7d2</id>
                <name><![CDATA[abc_dead]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[PCC_monitor.Synch_check.abc_dead]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>40.0</x>
                    <y>72.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288697b811e9875bf8da0c5ce7d2</id>
                <name><![CDATA[ABC_nom]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[PCC_monitor.Synch_check.ABC_nom]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>40.0</x>
                    <y>96.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288797b811e98709f8da0c5ce7d2</id>
                <name><![CDATA[VABC_nom]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[PCC_monitor.Synch_check.VABC_nom]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>40.0</x>
                    <y>120.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e16288897b811e9a202f8da0c5ce7d2</id>
                <name><![CDATA[f_ABC_nom]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Digital signal</data_type>
                <signal_name><![CDATA[PCC_monitor.Synch_check.f_ABC_nom]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
displayValue = False
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>40.0</x>
                    <y>144.0</y>
                    <width>104</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9e164f7e97b811e9ae80f8da0c5ce7d2</id>
                <name><![CDATA[P_pcc]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='PCC_monitor.P  KW')
#hil.read_analog_signal(name = "PCC_monitor.P ")
displayValue = P/1000

]]></code>
                <analog_signals><![CDATA[['PCC_monitor.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>248.0</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9e164f7f97b811e98420f8da0c5ce7d2</id>
                <name><![CDATA[Qpcc]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='PCC_monitor.Q kVAr')
#hil.read_analog_signal(name = "PCC_monitor.Q")
displayValue = P/1000

]]></code>
                <analog_signals><![CDATA[['PCC_monitor.Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>256.0</x>
                    <y>248.0</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9e164f8097b811e995c2f8da0c5ce7d2</id>
                <name><![CDATA[Ppcc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='PCC_monitor.P  KW')
#hil.read_analog_signal(name = "PCC_monitor.P ")
displayValue = P/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>64.0</x>
                    <y>384.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>9e164f8197b811e990b7f8da0c5ce7d2</id>
                <name><![CDATA[Qpcc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='PCC_monitor.Q kVAr')
#hil.read_analog_signal(name = "PCC_monitor.Q")
displayValue = P/1000
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>392.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>bc23248897b811e995d5f8da0c5ce7d2</id>
                <name><![CDATA[Grid]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Grid.Ggrid_meas.PGrid]]></signal_name>
                <unit><![CDATA[MW]]></unit>
                <automatic_unit>False</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>656.0</x>
                    <y>280.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdceb72e97b811e9bed9f8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.CB_status]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
Path = "ESS." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "Battery inverter" + "."

x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.CB_status")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>640.0</x>
                    <y>760.0</y>
                    <width>48</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede1a97b811e985cdf8da0c5ce7d2</id>
                <name><![CDATA[Fuel Cell]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt; font-style:italic;">Fuel Cell</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['fdcede1c97b811e99a8df8da0c5ce7d2', 'fdcede2797b811e99c90f8da0c5ce7d2', 'fdcede2897b811e9bc15f8da0c5ce7d2', 'fdcede2a97b811e986f6f8da0c5ce7d2', 'fdcede2b97b811e98e4ff8da0c5ce7d2', 'fdcede2c97b811e9b434f8da0c5ce7d2', 'fdcede2d97b811e9a4cdf8da0c5ce7d2', 'fdcf04e497b811e9a4dbf8da0c5ce7d2', 'fdcf04e597b811e99777f8da0c5ce7d2', 'fdcf04e697b811e98f91f8da0c5ce7d2', 'fdcf04e797b811e99d92f8da0c5ce7d2', 'fdcf04ea97b811e9b2e1f8da0c5ce7d2', '0e3bcd3ab37111ea948bf8da0c5ce7d2', '3cd7e39cb37111ea9391f8da0c5ce7d2', 'dd6bc140b37111ea919af8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\Typhoon_Tutorial\Training\2\Microgrid model\Battery.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

Path = "Fuel_Cell." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "SOFC inverter."
Sb = 50e3 #VA
Vb = 208 #V
fb = 60.0 #Hz]]></initialization_code>
                <widget_settings>
                    <x>776.0</x>
                    <y>800.0</y>
                    <width>176</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf051997b811e995ecf8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
Path = "ESS." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "Battery inverter" + "."

x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.on")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>760.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf051a97b811e9b15cf8da0c5ce7d2</id>
                <name><![CDATA[Battery inverter panel]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt; font-style:italic;">Battery inverter panel</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['fdcf051c97b811e99978f8da0c5ce7d2', 'fdcf051d97b811e98341f8da0c5ce7d2', 'fdcf051e97b811e996b8f8da0c5ce7d2', 'fdcf052297b811e989adf8da0c5ce7d2', 'fdcf052397b811e982e3f8da0c5ce7d2', 'fdcf052697b811e9bfb7f8da0c5ce7d2', 'fdcf052897b811e9b4c8f8da0c5ce7d2', 'fdcf052a97b811e9b1f2f8da0c5ce7d2', 'fdcf2be497b811e99026f8da0c5ce7d2', 'fdcf2be597b811e98bc3f8da0c5ce7d2', 'fdcf2be697b811e98ef3f8da0c5ce7d2', 'fdcf2be797b811e9a441f8da0c5ce7d2', 'fdcf2be897b811e9a4bef8da0c5ce7d2', 'fdcf2bea97b811e9ac29f8da0c5ce7d2', 'fdcf2beb97b811e9ab2ef8da0c5ce7d2', 'fdcf2bec97b811e9b278f8da0c5ce7d2', 'fdcf2bed97b811e981e7f8da0c5ce7d2', 'fdcf2bee97b811e9a1c5f8da0c5ce7d2', 'fdcf2bef97b811e99205f8da0c5ce7d2', 'fdcf2bf197b811e99bd7f8da0c5ce7d2', 'fdcf2bf297b811e9922ef8da0c5ce7d2', 'fdcf2bf397b811e9a988f8da0c5ce7d2', 'fdcf2bf497b811e9be27f8da0c5ce7d2', 'fdcf2bf597b811e9ada6f8da0c5ce7d2', 'fdcf2bf897b811e9b6e9f8da0c5ce7d2', 'fdcf2bf997b811e98737f8da0c5ce7d2', 'fdcf2bfa97b811e9a6faf8da0c5ce7d2', 'fdcf2bfb97b811e9a174f8da0c5ce7d2', '807b0de4998d11eabecef8da0c5ce7d2', '837c560a998d11eab401f8da0c5ce7d2', '0e690512998e11ea9ebcf8da0c5ce7d2', '103a1022b31011eaa2a8f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\Typhoon_Tutorial\Training\Microgrid model\Battery.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

Path = "ESS." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "Battery inverter" + "."
Vn = 208.0 #V
fn = 60.0 #Hz
Sn = 0.5e6 #VA]]></initialization_code>
                <widget_settings>
                    <x>544.0</x>
                    <y>784.0</y>
                    <width>192</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede1c97b811e99a8df8da0c5ce7d2</id>
                <name><![CDATA[Inverter Control]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['fdcede1d97b811e99239f8da0c5ce7d2', 'fdcede1e97b811e9a6b9f8da0c5ce7d2', 'fdcede1f97b811e98939f8da0c5ce7d2', 'fdcede2097b811e9a33ef8da0c5ce7d2', 'fdcede2197b811e9aa77f8da0c5ce7d2', 'fdcede2297b811e99f3bf8da0c5ce7d2', 'fdcede2397b811e9b380f8da0c5ce7d2', 'fdcede2497b811e99efaf8da0c5ce7d2', 'fdcede2597b811e9ab70f8da0c5ce7d2', 'fdcede2697b811e9a070f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>616.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede1d97b811e99239f8da0c5ce7d2</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    #hil.set_scada_input_value(Path + 'Enable', 1.0)
    hil.set_scada_input_value('Fuel_Cell.Enable', 1.0)

    pass
else:
    # do something when checkbox is unchecked
    #hil.set_scada_input_value(Path + 'Enable', 0.0)
    hil.set_scada_input_value('Fuel_Cell.Enable', 0.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value('Fuel_Cell.Enable', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>24.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede1e97b811e9a6b9f8da0c5ce7d2</id>
                <name><![CDATA[Connect]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    #hil.set_scada_input_value(Path + 'Connect', 1.0)
    hil.set_scada_input_value('Fuel_Cell.Connect', 1.0)

    pass
else:
    # do something when checkbox is unchecked
    #hil.set_scada_input_value(Path + 'Connect', 0.0)
    hil.set_scada_input_value('Fuel_Cell.Connect', 0.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value('Fuel_Cell.Connect', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede1f97b811e98939f8da0c5ce7d2</id>
                <name><![CDATA[Connected]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Fuel_Cell.SOFC inverter.S1_fb')
#hil.read_digital_signal(name = Path + Component_name + "S1_fb")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>0.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2097b811e9a33ef8da0c5ce7d2</id>
                <name><![CDATA[Enabled]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Fuel_Cell.SOFC inverter.enable')
#hil.read_digital_signal(name = Path + Component_name + "enable")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>24.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2197b811e9aa77f8da0c5ce7d2</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Fuel_Cell.SOFC inverter.On')
#hil.read_digital_signal(name = Path + Component_name + "On")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>16.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2297b811e99f3bf8da0c5ce7d2</id>
                <name><![CDATA[Q mode On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Qmode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Grid_follow.Qmode")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>48.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2397b811e9b380f8da0c5ce7d2</id>
                <name><![CDATA[Q mode]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    #hil.set_scada_input_value(Path + 'Q_mode', 1.0)
    hil.set_scada_input_value('Fuel_Cell.Q_mode', 1.0)

    pass
else:
    # do something when checkbox is unchecked
    #hil.set_scada_input_value(Path + 'Q_mode', 0.0)
    hil.set_scada_input_value('Fuel_Cell.Q_mode', 0.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value('Fuel_Cell.Q_mode', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[False]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>48.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2497b811e99efaf8da0c5ce7d2</id>
                <name><![CDATA[Pref_FC]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
#hil.set_scada_input_value(Path + 'wind_speed', inputValue)
hil.set_scada_input_value('Fuel_Cell.Pref_FC', 50)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[50.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kW]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>88.0</y>
                    <width>232</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2597b811e9ab70f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
#hil.set_scada_input_value(Path + 'Q_ref', inputValue)
hil.set_scada_input_value('Fuel_Cell.Q_ref', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>136.0</y>
                    <width>240</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2697b811e9a070f8da0c5ce7d2</id>
                <name><![CDATA[Voltage Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
#hil.set_scada_input_value(Path + 'V_ref', inputValue)
#hil.set_scada_input_value('Wind.V_ref', 208.0)
hil.set_scada_input_value('Fuel_Cell.V_ref', 208.0)



]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[V (line to line)]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>112.0</y>
                    <width>280</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2797b811e99c90f8da0c5ce7d2</id>
                <name><![CDATA[DC_voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name='FC_Vdc')

#hil.read_analog_signal(name = Path + Component_name + "Vdc")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Vdc]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>250</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2897b811e9bc15f8da0c5ce7d2</id>
                <name><![CDATA[FC_Vdc]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='FC_Vdc')
]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.f_meas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>376.0</x>
                    <y>280.0</y>
                    <width>272</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 1.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2a97b811e986f6f8da0c5ce7d2</id>
                <name><![CDATA[Set DC source]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API



]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers.
# HIL API


#hil.set_source_constant_value(Path + Component_name + 'Vs2', value = 350.0)
hil.set_source_constant_value('Fuel_Cell.SOFC inverter.SOFC.SOFC.Vs1', value=531)


]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API



]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2b97b811e98e4ff8da0c5ce7d2</id>
                <name><![CDATA[FC_Idc]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='FC_Idc')


]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.Vt_meas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>256.0</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-20.0</y_range_min>
                    <y_range_max>20.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 1.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2c97b811e9b434f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Fuel Cell Power')

#hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.P')
#hil.read_analog_signal(name = Path + Component_name + "Control.Grid_follow.P")
displayValue = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.w_pu')*Sb/1000


]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcede2d97b811e9a4cdf8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.Q')
#hil.read_analog_signal(name = Path + Component_name + "Control.Grid_follow.Q")
displayValue = Q/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf04e497b811e9a4dbf8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.S')
#hil.read_analog_signal(name = Path + Component_name + "Control.Grid_follow.S")
displayValue = S/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248.0</x>
                    <y>120.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf04e597b811e99777f8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.PLL.Vt_meas')
#hil.read_analog_signal(name = Path + Component_name + "Control.PLL.Vt_meas")
displayValue = V/1.13]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Vt_meas]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>16.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf04e697b811e98f91f8da0c5ce7d2</id>
                <name><![CDATA[Power factor]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
pf = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.pf')
#hil.read_analog_signal(name = Path + Component_name + "Control.Grid_follow.pf")
displayValue = pf

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>120.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf04e797b811e99d92f8da0c5ce7d2</id>
                <name><![CDATA[Frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.PLL.f_meas')
#hil.read_analog_signal(name = Path + Component_name + "Control.PLL.f_meas")
displayValue = f]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.PLL.f_meas]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248.0</x>
                    <y>8.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf04ea97b811e9b2e1f8da0c5ce7d2</id>
                <name><![CDATA[Trace graph]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['Fuel_Cell.SOFC inverter.Control.Grid_follow.w_pu']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>920.0</x>
                    <y>8.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf051c97b811e99978f8da0c5ce7d2</id>
                <name><![CDATA[Vref [V]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

#hil.set_scada_input_value(Path + 'Vref', inputValue)
hil.set_scada_input_value('ESS.Vref', inputValue)


]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 208
hil.set_scada_input_value(Path + 'Vref', widgetValue)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <min>0.0</min>
                <max>208.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>200.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf051d97b811e98341f8da0c5ce7d2</id>
                <name><![CDATA[Frequency]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = Path + Component_name + "Control.f")
displayValue = f*fn

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.f]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>176.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf051e97b811e996b8f8da0c5ce7d2</id>
                <name><![CDATA[Utility frequency out of limits]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.Check_grid.out of limit freq]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Synch.Check_grid.out of limit freq")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>264.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf052297b811e989adf8da0c5ce7d2</id>
                <name><![CDATA[Inverter Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Grid forming':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(Path + 'mode', 0.0)
    pass
elif inputValue == 'Grid following':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(Path + 'mode', 1.0)
    pass]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = "Grid following"
hil.set_scada_input_value(Path + 'mode', 1.0)
hil.set_contactor('S1',swControl= True,swState= True)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Grid following]]></inputValue>
                <availableValues><![CDATA[['Grid forming', 'Grid following']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>480.0</x>
                    <y>168.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf052397b811e982e3f8da0c5ce7d2</id>
                <name><![CDATA[Qref [kW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(Path + 'Qref', inputValue*1000.0)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(Path + 'Qref', widgetValue*1000.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <min>-1600.0</min>
                <max>1600.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>336.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf052697b811e9bfb7f8da0c5ce7d2</id>
                <name><![CDATA[Grid Following]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.Grid following]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.Grid following")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>336.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf052897b811e9b4c8f8da0c5ce7d2</id>
                <name><![CDATA[Grid Forming]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.Grid forming]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.Grid forming")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>312.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf052a97b811e9b1f2f8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vt = hil.read_analog_signal(name = Path + Component_name + "Control.Vt")
displayValue = Vt*Vn

]]></code>
                <signal_name><![CDATA[Ess_inverter.Control.Vt]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>757.0</max>
                    <warning_range>(384.0, 432.0, 528.0, 576.0)</warning_range>
                    <critical_range>(0.0, 384.0, 576.0, 800.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2be497b811e99026f8da0c5ce7d2</id>
                <name><![CDATA[Inverter On]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'OFF':
    # do something when 'Case 1' is selected
    hil.set_scada_input_value(Path + 'On', 0.0)
    pass
elif inputValue == 'ON':
    # do something when 'Case 2' is selected
    hil.set_scada_input_value(Path + 'On', 1.0)
    pass
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = "ON"
hil.set_scada_input_value('On', 1.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[ON]]></inputValue>
                <availableValues><![CDATA[['ON', 'OFF']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>480.0</x>
                    <y>136.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2be597b811e98bc3f8da0c5ce7d2</id>
                <name><![CDATA[DC link voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Vdc = hil.read_analog_signal(name = Path + Component_name + "VDC")
displayValue = Vdc

]]></code>
                <signal_name><![CDATA[Ess_inverter.VDC]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>352.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1200.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2be697b811e98ef3f8da0c5ce7d2</id>
                <name><![CDATA[Utility voltage out of limits]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.Check_grid.out of limit volts]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Synch.Check_grid.out of limit volts")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>240.0</y>
                    <width>208</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2be797b811e9a441f8da0c5ce7d2</id>
                <name><![CDATA[Phase lock]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.phase_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Synch.phase_lock")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>336.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2be897b811e9a4bef8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = Path + Component_name + "Control.S")
displayValue = S/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>304.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bea97b811e9ac29f8da0c5ce7d2</id>
                <name><![CDATA[Pref [kW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(Path + 'Pref', inputValue*1000.0)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = -500.0
hil.set_scada_input_value(Path + 'Pref', widgetValue*1000.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[-500.0]]></inputValue>
                <min>-500.0</min>
                <max>500.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>296.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2beb97b811e9ab2ef8da0c5ce7d2</id>
                <name><![CDATA[Frequency lock]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.freq_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off

x = hil.read_digital_signal(name = Path + Component_name + "Control.Synch.freq_lock")
displayValue = bool(x)]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>312.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bec97b811e9b278f8da0c5ce7d2</id>
                <name><![CDATA[f_ref [Hz]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(Path + 'f_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 60.0
hil.set_scada_input_value(Path + 'f_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[60.0]]></inputValue>
                <min>0.0</min>
                <max>100.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>464.0</x>
                    <y>248.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bed97b811e981e7f8da0c5ce7d2</id>
                <name><![CDATA[Inverter CB]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.CB_status]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.CB_status")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>232.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bee97b811e9a1c5f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power [kVAr]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = Path + Component_name + "Control.Q")
displayValue = Q/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.Q']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>344.0</x>
                    <y>416.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bef97b811e99205f8da0c5ce7d2</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.on")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>208.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf197b811e99bd7f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = Path + Component_name + "Control.P")
displayValue = P/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf297b811e9922ef8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = Path + Component_name + "Control.Q")
displayValue = Q/1000.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Ess_inverter.Control.P]]></signal_name>
                <unit><![CDATA[kVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>152.0</x>
                    <y>144.0</y>
                    <width>152</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf397b811e9a988f8da0c5ce7d2</id>
                <name><![CDATA[Battery charge]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
soc = hil.get_battery_soc(Path + "Battery 1")
displayValue = soc*100.0

]]></code>
                <signal_name><![CDATA[PCC and ESS.Battery 1]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>528.0</x>
                    <y>0.0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf497b811e9be27f8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power [kVA]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = Path + Component_name + "Control.S")
displayValue = S/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.S']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>608.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf597b811e9ada6f8da0c5ce7d2</id>
                <name><![CDATA[Stand By]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.StandBy]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.StandBy")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>288.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf897b811e9b6e9f8da0c5ce7d2</id>
                <name><![CDATA[Voltage Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Synch.phase_lock]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Synch.phase_lock")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>360.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bf997b811e98737f8da0c5ce7d2</id>
                <name><![CDATA[Vmode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.V_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.V_mode")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>208.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bfa97b811e9a6faf8da0c5ce7d2</id>
                <name><![CDATA[Synch]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.synch]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.synch")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>208.0</x>
                    <y>288.0</y>
                    <width>120</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fdcf2bfb97b811e9a174f8da0c5ce7d2</id>
                <name><![CDATA[Active Power [kW]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = Path + Component_name + "Control.P")
displayValue = P/1000.0

]]></code>
                <analog_signals><![CDATA[['PCC and ESS.Ess_inverter.Control.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>408.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>190000.0</y_range_min>
                    <y_range_max>210000.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d81829d897b911e994a6f8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Ess_inverter.Control.Inv_Cab_SM.read_mode.on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
Path = "Fuel_Cell." # Subsystem path to where the component is. The last '.' before the component name must be included here.
path_to_component = "SOFC inverter."+ "."

x = hil.read_digital_signal(name='Fuel_Cell.SOFC inverter.On')
#hil.read_digital_signal(name='Fuel_Cell.Battery inverter (Average).Control.Inv_Cab_SM.read_mode.on')
#hil.read_digital_signal(name = Path + Component_name + "Control.Inv_Cab_SM.read_mode.on")
displayValue = bool(x)

]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>816.0</x>
                    <y>768.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd366ad997b911e98189f8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Gen_On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
Path = "DG_800kW." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "Diesel_Gen" + "."

x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Gen_On')
#hil.read_digital_signal(name = Path + Component_name + "Control.Gen_On")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1032.0</x>
                    <y>448.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd3691c697b911e9ad8af8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.MCB_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
Path = "DG_800kW." # Subsystem path to where the component is. The last '.' before the component name must be included here.
Component_name = "Diesel_Gen" + "."


x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.MCB_fb')
#hil.read_digital_signal(name = Path + Component_name + "MCB_fb")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1056.0</x>
                    <y>448.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd3691c797b911e98519f8da0c5ce7d2</id>
                <name><![CDATA[Diesel Genset 800kW]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:10pt; font-style:italic;">Diesel</span><span style=" font-size:12pt; font-style:italic;"> Genset 800kW</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['fd3691c897b911e9a9f6f8da0c5ce7d2', 'fd3691c997b911e98800f8da0c5ce7d2', 'fd3691ca97b911e9a57ff8da0c5ce7d2', 'fd3691cb97b911e99404f8da0c5ce7d2', 'fd3691cc97b911e9a6ccf8da0c5ce7d2', 'fd3691cd97b911e9abc1f8da0c5ce7d2', 'fd3691ce97b911e99791f8da0c5ce7d2', 'fd3691cf97b911e98029f8da0c5ce7d2', 'fd36b8b697b911e999bff8da0c5ce7d2', 'fd36b8b797b911e98c2af8da0c5ce7d2', 'fd36b8b897b911e9ab1bf8da0c5ce7d2', 'fd36b8b997b911e9b37ef8da0c5ce7d2', 'fd36b8ba97b911e9af66f8da0c5ce7d2', 'fd36b8bb97b911e98059f8da0c5ce7d2', 'fd36b8bc97b911e98579f8da0c5ce7d2', 'fd36b8bd97b911e9b714f8da0c5ce7d2', 'fd36b8be97b911e9ae61f8da0c5ce7d2', 'fd36b8bf97b911e985f8f8da0c5ce7d2', 'fd36b8c097b911e98bb5f8da0c5ce7d2', 'fd36b8c197b911e9ada1f8da0c5ce7d2', 'fd36b8c297b911e9ad64f8da0c5ce7d2', 'fd36b8c397b911e98e83f8da0c5ce7d2', 'fd36b8c497b911e997f3f8da0c5ce7d2', 'fd36b8c597b911e99472f8da0c5ce7d2', 'fd36b8c697b911e99df8f8da0c5ce7d2', 'fd36b8c797b911e99d41f8da0c5ce7d2', 'fd36dfa697b911e9a6caf8da0c5ce7d2', 'fd36dfa797b911e9b417f8da0c5ce7d2', 'fd36dfa897b911e9ac31f8da0c5ce7d2', 'fd36dfa997b911e98baef8da0c5ce7d2', 'fd36dfaa97b911e98992f8da0c5ce7d2', 'fd36dfab97b911e99931f8da0c5ce7d2', 'fd36dfac97b911e9af36f8da0c5ce7d2', 'fd36dfad97b911e9b03ef8da0c5ce7d2', 'fd36dfae97b911e9b755f8da0c5ce7d2', 'fd36dfaf97b911e9981bf8da0c5ce7d2', '596953b4b37a11ea8d3cf8da0c5ce7d2', '658abdaeb37a11eaacdff8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\typhoon hil control center\examples\models\microgrid\diesel_genset\diesel_genset.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "Diesel_Gen."
path_to_inputs = "DG_in."
path_to_outputs = "DG_out."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 1.067 # MVA
fb = 60  # Hz
pms = 2  # number of pole pairs
wb = fb*60/pms  # RPM
Vtb = 4160.0  # V
]]></initialization_code>
                <widget_settings>
                    <x>1088.0</x>
                    <y>256.0</y>
                    <width>184</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd3691c897b911e9a9f6f8da0c5ce7d2</id>
                <name><![CDATA[Vt]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Control.Exciter.Vt')
#hil.read_analog_signal(name = path_to_component + "Control.Exciter.Vt")
displayValue = x


]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Control.Exciter.Vt']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>352.0</x>
                    <y>416.0</y>
                    <width>312</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.999</y_range_min>
                    <y_range_max>1.001</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd3691c997b911e98800f8da0c5ce7d2</id>
                <name><![CDATA[w meas]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Control.Governor_and_Engine.wmeas')
#hil.read_analog_signal(name = path_to_component + "Control.Governor_and_Engine.wmeas")
displayValue = x

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Control.Governor_and_Engine.wmeas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>424.0</y>
                    <width>312</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1.1</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd3691ca97b911e9a57ff8da0c5ce7d2</id>
                <name><![CDATA[Synch Check]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

import math
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
V1 = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Sync_Check.PLLs.V_grid')
#hil.read_analog_signal(name = path_to_component + "Sync_Check.PLLs.V_grid")
V2 = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Sync_Check.PLLs.V_gen')
#hil.read_analog_signal(name = path_to_component + "Sync_Check.PLLs.V_gen")
Phase_dif = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Sync_Check.check_phase_diff.phase_diff')

phase = 180*Phase_dif/math.pi


if V1>0:
    alpha = 0
    beta = phase
else:
    alpha = 180
    beta = phase + 180
    


displayValue = [['Vref',alpha,abs(V1)],['Vgen1',beta,abs(V2)]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[const_0V]]></magnitude_signal>
                        <phase_signal><![CDATA[const_0V]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>560.0</x>
                    <y>0.0</y>
                    <width>304</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd3691cb97b911e99404f8da0c5ce7d2</id>
                <name><![CDATA[Phasor graph]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

import math
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
S = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.S')
P = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.P')
Q = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.Q')
theta = 180*math.atan2(Q,P)/math.pi
#S = (P**2+Q**2)**(1.0/2.0)


if P>0:
    alpha = 0
else:
    alpha = 180
    
if Q>0:
    beta = 90
else:
    beta = 270

displayValue = [['S',theta,abs(Sb*S)],['P',alpha,abs(Sb*P)],['Q',beta,abs(Sb*Q)]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[const_0V]]></magnitude_signal>
                        <phase_signal><![CDATA[const_0V]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>392.0</x>
                    <y>0.0</y>
                    <width>248</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd3691cc97b911e9a6ccf8da0c5ce7d2</id>
                <name><![CDATA[w ref [RPM]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


#.set_scada_input_value(path_to_inputs + 'wref', inputValue/wb)
hil.set_scada_input_value('DG_800kW.wref', inputValue/wb)


]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
widgetValue = wb
#hil.set_scada_input_value(path_to_inputs + 'wref', 1)
hil.set_scada_input_value('DG_800kW.wref', 1)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1800.0]]></inputValue>
                <min>0.0</min>
                <max>2000.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>568.0</x>
                    <y>216.0</y>
                    <width>200</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd3691cd97b911e9abc1f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.P')
#hil.read_analog_signal(name = path_to_component + "Measurements.P")
displayValue = P*Sb*1000


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[kW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>128.0</y>
                    <width>136</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd3691ce97b911e99791f8da0c5ce7d2</id>
                <name><![CDATA[Frequency Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.f_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.f_match')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.f_match")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>280.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd3691cf97b911e98029f8da0c5ce7d2</id>
                <name><![CDATA[Grid Forming Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.GridForming]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.GridForming')
#hil.read_digital_signal(name = path_to_component + "Control.GridForming")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>280.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8b697b911e999bff8da0c5ce7d2</id>
                <name><![CDATA[PQ Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.PQ_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Read_Control_mode.PQ_mode')
#hil.read_digital_signal(name = path_to_component + "Control.Read_Control_mode.PQ_mode")
displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>352.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8b797b911e98c2af8da0c5ce7d2</id>
                <name><![CDATA[Phase Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Phase_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.Phase_match')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.Phase_match")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>304.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8b897b911e9ab1bf8da0c5ce7d2</id>
                <name><![CDATA[MCB Closed]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.MCB_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.MCB_fb')
 #hil.read_digital_signal(name = path_to_component + "MCB_fb")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>216.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8b997b911e9b37ef8da0c5ce7d2</id>
                <name><![CDATA[Exciter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Exciter_on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Exciter_on')
#hil.read_digital_signal(name = path_to_component + "Control.Exciter_on")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>232.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8ba97b911e9af66f8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
w = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Control.Exciter.Vt')
#hil.read_analog_signal(name = path_to_component + "Control.Exciter.Vt")
displayValue = w*Vtb
]]></code>
                <signal_name><![CDATA[DIESEL GENSET.Control.Exciter1.Vf]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>200.0</x>
                    <y>0.0</y>
                    <width>192</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>4500.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8bb97b911e98059f8da0c5ce7d2</id>
                <name><![CDATA[Operation Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'StandBy':
    # do something when 'Case 1' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 0.0)
    hil.set_scada_input_value('DG_800kW.Gen_OP_mode', 0.0)


    pass
elif inputValue == 'Grid Following':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 1.0)
    hil.set_scada_input_value('DG_800kW.Gen_OP_mode', 1.0)


    pass
elif inputValue == 'Grid Forming':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 2.0)
    hil.set_scada_input_value('DG_800kW.Gen_OP_mode', 2.0)

    pass]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

widgetValue = "StandBy"
hil.set_scada_input_value('DG_800kW.Gen_OP_mode', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[StandBy]]></inputValue>
                <availableValues><![CDATA[['StandBy', 'Grid Following', 'Grid Forming']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>352.0</y>
                    <width>216</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8bc97b911e98579f8da0c5ce7d2</id>
                <name><![CDATA[Breaker command]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Contactor_Control.GCB_cmd]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.Contactor_Control.GCB_cmd')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.Contactor_Control.GCB_cmd")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>176.0</x>
                    <y>192.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8bd97b911e9b714f8da0c5ce7d2</id>
                <name><![CDATA[Control Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Vf':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 0.0)
    hil.set_scada_input_value('DG_800kW.Gen_Control_Mode', 0.0)

    pass
elif inputValue == 'PV':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 1.0)
    hil.set_scada_input_value('DG_800kW.Gen_Control_Mode', 1.0)

    pass
elif inputValue == 'P - pf':
    # do something when 'Case 3' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 2.0)
    hil.set_scada_input_value('DG_800kW.Gen_Control_Mode', 2.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


if inputValue == 'PV':
    # do something when 'Case 2' is selected
    hil.set_cp_input_value('User defined', 'Genset', 'Q_Control_Mode', 0.0)
    pass
elif inputValue == 'PQ':
    # do something when 'Case 3' is selected
    hil.set_cp_input_value('User defined', 'Genset', 'Q_Control_Mode', 1.0)
    pass

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[P - pf]]></inputValue>
                <availableValues><![CDATA[['Vf', 'PV', 'P - pf']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>288.0</y>
                    <width>168</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8be97b911e9ae61f8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.S')
displayValue = S*Sb


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[MVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>144.0</x>
                    <y>136.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8bf97b911e985f8f8da0c5ce7d2</id>
                <name><![CDATA[Gen On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Gen_On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Gen_On')
#hil.read_digital_signal(name = path_to_component + "Control.Gen_On")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>208.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c097b911e98bb5f8da0c5ce7d2</id>
                <name><![CDATA[Vf Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.Vf_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Read_Control_mode.Vf_mode')
#hil.read_digital_signal(name = path_to_component + "Control.Read_Control_mode.Vf_mode")
displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>304.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c197b911e9ada1f8da0c5ce7d2</id>
                <name><![CDATA[Breaker control]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Contactor_Control.GCB_control]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.Contactor_Control.GCB_control')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.Contactor_Control.GCB_control")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>352.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c297b911e9ad64f8da0c5ce7d2</id>
                <name><![CDATA[Gen]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_On', 1.0)
    hil.set_scada_input_value('DG_800kW.Gen_On', 1.0)

    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_On', 0.0)
    hil.set_scada_input_value('DG_800kW.Gen_On', 0.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

widgetValue = 'Off'
hil.set_scada_input_value('DG_800kW.Gen_On', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Off]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>256.0</y>
                    <width>160</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c397b911e98e83f8da0c5ce7d2</id>
                <name><![CDATA[Steady State Speed]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Speed_ss]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.Speed_ss')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.Speed_ss")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>256.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c497b911e997f3f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.Q')
displayValue = Q*Sb



]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>296.0</x>
                    <y>136.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c597b911e99472f8da0c5ce7d2</id>
                <name><![CDATA[V ref [V]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value(path_to_inputs + 'Vref', 
hil.set_scada_input_value('DG_800kW.Vref', inputValue/Vtb)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

widgetValue = Vtb
hil.set_scada_input_value('DG_800kW.Vref', 1)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[4160.0]]></inputValue>
                <min>0.0</min>
                <max>4160.0</max>
                <step>0.1</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>808.0</x>
                    <y>264.0</y>
                    <width>200</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c697b911e99df8f8da0c5ce7d2</id>
                <name><![CDATA[Speed]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
w = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Control.Governor_and_Engine.wmeas')
#hil.read_analog_signal(name = path_to_component + "Control.Governor_and_Engine.wmeas")
displayValue = w*wb
]]></code>
                <signal_name><![CDATA[Control.Governor_and_Diesel_Engine1.wmeas]]></signal_name>
                <unit><![CDATA[RPM]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>192</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <min>0.0</min>
                    <max>2000.0</max>
                    <warning_range>(1710.0, 1755.0, 1845.0, 1890.0)</warning_range>
                    <critical_range>(1500.0, 1709.0, 1891.0, 2000.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36b8c797b911e99d41f8da0c5ce7d2</id>
                <name><![CDATA[PV Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.PV_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.Read_Control_mode.PV_mode')
#hil.read_digital_signal(name = path_to_component + "Control.Read_Control_mode.PV_mode")
displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>328.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfa697b911e9a6caf8da0c5ce7d2</id>
                <name><![CDATA[StandBy Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.StandBy]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.StandBy')
#hil.read_digital_signal(name = path_to_component + "Control.StandBy")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>232.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfa797b911e9b417f8da0c5ce7d2</id>
                <name><![CDATA[P ref [MW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


#hil.set_scada_input_value(path_to_inputs + 'Pref', 
hil.set_scada_input_value('DG_800kW.Pref', inputValue/(Sb))


]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

hil.set_scada_input_value('DG_800kW.Pref', inputValue/(Sb))

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.8]]></inputValue>
                <min>0.0</min>
                <max>0.9</max>
                <step>0.1</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>808.0</x>
                    <y>208.0</y>
                    <width>200</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfa897b911e9ac31f8da0c5ce7d2</id>
                <name><![CDATA[Grid Following Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.GridFollowing]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Control.GridFollowing')
#hil.read_digital_signal(name = path_to_component + "Control.GridFollowing")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>256.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfa997b911e98baef8da0c5ce7d2</id>
                <name><![CDATA[V match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.V_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='DG_800kW.Diesel_Gen.Sync_Check.V_match')
#hil.read_digital_signal(name = path_to_component + "Sync_Check.V_match")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>328.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfaa97b911e98992f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.P')
#hil.read_analog_signal(name = path_to_component + "Measurements.P")
displayValue = P*Sb

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>376.0</x>
                    <y>600.0</y>
                    <width>296</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>0.02</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfab97b911e99931f8da0c5ce7d2</id>
                <name><![CDATA[angle]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
phase = 180*hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Sync_Check.check_phase_diff.phase_diff')/np.pi
displayValue = phase


]]></code>
                <signal_name><![CDATA[angle]]></signal_name>
                <unit><![CDATA[°]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>800.0</x>
                    <y>144.0</y>
                    <width>120</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfac97b911e9af36f8da0c5ce7d2</id>
                <name><![CDATA[pf ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------
global pf_ref
# NOTE: entered value is available through variable 'inputValue'

pf_ref = inputValue
hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)


]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------
global pf_ref
# NOTE: entered value is available through variable 'inputValue'
pf_ref = 1.0
widgetValue = pf_ref
sign = 1.0
hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <min>0.7</min>
                <max>1.0</max>
                <step>0.01</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>576.0</x>
                    <y>272.0</y>
                    <width>192</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfad97b911e9b03ef8da0c5ce7d2</id>
                <name><![CDATA[pf]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.pf')
#hil.read_analog_signal(name = path_to_component + "Measurements.pf")

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>24.0</x>
                    <y>624.0</y>
                    <width>304</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.999</y_range_min>
                    <y_range_max>1.001</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfae97b911e9b755f8da0c5ce7d2</id>
                <name><![CDATA[pf mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

global sign

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Lead':
    # do something when 'Case 1' is selected
    sign = -1
    hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
    pass
elif inputValue == 'Lag':
    # do something when 'Case 2' is selected
    sign = 1
    hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API


global sign
# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Lag'
sign = 1
hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)



]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Lag]]></inputValue>
                <availableValues><![CDATA[['Lead', 'Lag']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368.0</x>
                    <y>320.0</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fd36dfaf97b911e9981bf8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.Q')
#hil.read_analog_signal(name = path_to_component + "Measurements.Q")
displayValue = P*Sb

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>688.0</x>
                    <y>432.0</y>
                    <width>304</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-480.0</y_range_min>
                    <y_range_max>480.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>d9f9c5d8981d11e9bd29f8da0c5ce7d2</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Fuel_Cell.SOFC inverter.S1_fb')
#hil.read_digital_signal(name = Path + Component_name + "S1_fb")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>856.0</x>
                    <y>768.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a0c9e742982011e987abf8da0c5ce7d2</id>
                <name><![CDATA[Tent 1]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 25 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1264.0</x>
                    <y>696.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c0a11b24982011e993bff8da0c5ce7d2</id>
                <name><![CDATA[Tent 2]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 25 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1360.0</x>
                    <y>696.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c1ac88cc982011e9bca2f8da0c5ce7d2</id>
                <name><![CDATA[Tent 3]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 25 %.72 KW')

displayValue = P/4
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1264.0</x>
                    <y>752.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>c2b1afb8982011e98397f8da0c5ce7d2</id>
                <name><![CDATA[Tent 4]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 25 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1360.0</x>
                    <y>752.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dbaf67a8982011e9aac2f8da0c5ce7d2</id>
                <name><![CDATA[Tent 8]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 50 %.72 KW')

displayValue =P/4
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1360.0</x>
                    <y>864.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dbaf67a9982011e9aab5f8da0c5ce7d2</id>
                <name><![CDATA[Tent 7]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 50 %.72 KW')

displayValue =P/4
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1264.0</x>
                    <y>864.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dbaf67aa982011e98f11f8da0c5ce7d2</id>
                <name><![CDATA[Tent 9]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 75 %.72 KW')

displayValue =P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1472.0</x>
                    <y>696.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dbaf67ab982011e999abf8da0c5ce7d2</id>
                <name><![CDATA[Tent  5]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 50 %.72 KW')

displayValue =P/4


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1264.0</x>
                    <y>808.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>e8efd890982011e9a41bf8da0c5ce7d2</id>
                <name><![CDATA[Tent 12]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 75 %.72 KW')

displayValue =P/4
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1568.0</x>
                    <y>752.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>e8efd891982011e9ac76f8da0c5ce7d2</id>
                <name><![CDATA[Tent 11]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 75 %.72 KW')

displayValue =P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1472.0</x>
                    <y>752.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>e8efd892982011e9a13ff8da0c5ce7d2</id>
                <name><![CDATA[Tent 13]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 100 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1472.0</x>
                    <y>808.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>e8efd893982011e995a9f8da0c5ce7d2</id>
                <name><![CDATA[Tent 10]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 75 %.72 KW')

displayValue =P/4
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1568.0</x>
                    <y>696.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ed5909d8982011e9b1d9f8da0c5ce7d2</id>
                <name><![CDATA[Tent 16]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 100 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1576.0</x>
                    <y>864.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ed5909da982011e9b8bbf8da0c5ce7d2</id>
                <name><![CDATA[Tent 6]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 50 %.72 KW')

displayValue =P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1360.0</x>
                    <y>808.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ed5909db982011e98d55f8da0c5ce7d2</id>
                <name><![CDATA[Tent 14]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 100 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1576.0</x>
                    <y>808.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ed5909d9982011e9857af8da0c5ce7d2</id>
                <name><![CDATA[Tent 15]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='Load 100 %.72 KW')

displayValue = P/4

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1480.0</x>
                    <y>864.0</y>
                    <width>96</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>86346f549c1711e98d0df8da0c5ce7d2</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.P')
#hil.read_analog_signal(name = path_to_component + "Measurements.P")
displayValue = P*1.067*1000
]]></code>
                <signal_name><![CDATA[DG_800kW.Diesel_Gen.Measurements.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[3]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1096.0</x>
                    <y>408.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>4c4aec1e9c1c11e993cff8da0c5ce7d2</id>
                <name><![CDATA[]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='ESS.Battery inverter.Control.P')/1000


]]></code>
                <signal_name><![CDATA[ESS.Battery inverter.Control.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>568.0</x>
                    <y>944.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>61449adc9c1c11e9abb3f8da0c5ce7d2</id>
                <name><![CDATA[Display]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>440.0</x>
                    <y>168.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2d559ad3a1a211e9bb1bf8da0c5ce7d2</id>
                <name><![CDATA[]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Gen_On')

#hil.read_digital_signal(name='Diesel_Gen.Back to back converter (Average).On1')
#hil.read_digital_signal(name='Diesel_Gen.Back to back converter (Average).On2')
#hil.read_digital_signal(name = path_to_component + "On2")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1024.0</x>
                    <y>768.0</y>
                    <width>32</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>9a21cfe4a1a211e9bd95f8da0c5ce7d2</id>
                <name><![CDATA[ ]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off


x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.Contactor_Control.GCB_cmd')


displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>1056.0</x>
                    <y>768.0</y>
                    <width>40</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>c904dc36a45211e9bd1bf8da0c5ce7d2</id>
                <name><![CDATA[Grid and Loads]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[[]]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffff7f</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
# HIL API is imported as 'hil'

]]></initialization_code>
                <widget_settings>
                    <x>24.0</x>
                    <y>528.0</y>
                    <width>424</width>
                    <height>272</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>0e6f62eea1c511e9b956f8da0c5ce7d2</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <hierarchy_position>1</hierarchy_position>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>48.0</x>
                    <y>544.0</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Scope</state>
                    <layout>None</layout>
                    <presets>
                        <active_capture_preset>Default</active_capture_preset>
                        <active_scope_preset>Default</active_scope_preset>
                        <capture name="Default">
                            <time_interval>200.0</time_interval>
                            <sample_rate>100.0</sample_rate>
                            <background_color>white</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Back-Up.DG_out.Out[0]</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Back-Up.DG_out.Out[1]</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ia_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Ib_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Ic_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Va_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Vb_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Vc_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Ia_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Ib_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Ic_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Va_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>12</channel>
                            <name>Vb_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>13</channel>
                            <name>Vc_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Back-Up.DG_out.Out[0]</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="True">
                                <subplots>
                                    <subplot>
                                        <number>1</number>
                                        <x_min>-1.9512185365853658</x_min>
                                        <x_max>198.04868146341462</x_max>
                                        <y_min>-769088.681057224</y_min>
                                        <y_max>442530.45956777595</y_max>
                                        <signals>
                                            
                                        </signals>
                                    </subplot>
                                    <subplot>
                                        <number>2</number>
                                        <x_min>-1.9512185365853658</x_min>
                                        <x_max>198.04868146341462</x_max>
                                        <y_min>18.510714850230315</y_min>
                                        <y_max>-22.96709007910438</y_max>
                                        <signals>
                                            
                                        </signals>
                                    </subplot>
                                    <subplot>
                                        <number>3</number>
                                        <x_min>-1.9512185365853658</x_min>
                                        <x_max>198.04868146341462</x_max>
                                        <y_min>321.40805033894344</y_min>
                                        <y_max>-349.4980674842734</y_max>
                                        <signals>
                                            
                                        </signals>
                                    </subplot>
                                    <subplot>
                                        <number>4</number>
                                        <x_min>-1.9512185365853658</x_min>
                                        <x_max>198.04868146341462</x_max>
                                        <y_min>0.0</y_min>
                                        <y_max>1.0</y_max>
                                        <signals>
                                            
                                        </signals>
                                    </subplot>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Grid</layout>
                            <legend>True</legend>
                            <show_viewports>4</show_viewports>
                            <decimation>2</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Ia_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Ib_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ic_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Va_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Vb_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Vc_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Ia_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Ib_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Ic_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Va_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Vb_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Vc_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>Ia_Prim</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>200.0</time_interval>
                        <sample_rate>100.0</sample_rate>
                        <background_color>white</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>Back-Up.DG_out.Out[0]</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>

                        <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Back-Up.DG_out.Out[0]</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Back-Up.DG_out.Out[1]</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ia_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Ib_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Ic_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Va_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Vb_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Vc_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Ia_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Ib_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Ic_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Va_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>12</channel>
                            <name>Vb_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>13</channel>
                            <name>Vc_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                         <digital_signals>
                            </digital_signals>

                    </capture>

                    <scope>
                        <time_base>0.005 </time_base>
                        <background_color>white</background_color>
                        <layout>Grid</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>Ia_Prim</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                        </trigger>

                         <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>Ia_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>Ib_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>Ic_Prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>Va_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>Vb_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>Vc_prim</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Ia_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Ib_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Ic_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Va_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Vb_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Vc_sec</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0.0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                        <digital_signals>
                            </digital_signals>

                    </scope>
                    <plotting_options in_use="True">
                    
                        <subplots>
                            <subplot>
                                <number>1</number>
                                <x_min>-1.9512185365853658</x_min>
                                <x_max>198.04868146341462</x_max>
                                <y_min>-769088.681057224</y_min>
                                <y_max>442530.45956777595</y_max>
                                <signals>
                                    
                                </signals>
                            </subplot>
                            <subplot>
                                <number>2</number>
                                <x_min>-1.9512185365853658</x_min>
                                <x_max>198.04868146341462</x_max>
                                <y_min>18.510714850230315</y_min>
                                <y_max>-22.96709007910438</y_max>
                                <signals>
                                    
                                </signals>
                            </subplot>
                            <subplot>
                                <number>3</number>
                                <x_min>-1.9512185365853658</x_min>
                                <x_max>198.04868146341462</x_max>
                                <y_min>321.40805033894344</y_min>
                                <y_max>-349.4980674842734</y_max>
                                <signals>
                                    
                                </signals>
                            </subplot>
                            <subplot>
                                <number>4</number>
                                <x_min>-1.9512185365853658</x_min>
                                <x_max>198.04868146341462</x_max>
                                <y_min>0.0</y_min>
                                <y_max>1.0</y_max>
                                <signals>
                                    
                                </signals>
                            </subplot>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>206cc8f897bb11e9832ef8da0c5ce7d2</id>
                <name><![CDATA[100 % Load ]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    #hil.set_contactor('Interruptible load.S1',swControl= True,swState= True)
    hil.set_contactor('Load 100 %.S1', swControl=True, swState=True)
    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    #hil.set_contactor('Interruptible load.S1',swControl= True,swState= False)
    hil.set_contactor('Load 100 %.S1', swControl=True, swState=False)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'On'
hil.set_contactor('Load 100 %.S1', swControl=True, swState=True)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>272.0</x>
                    <y>736.0</y>
                    <width>176</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>1e90b6ee97bb11e99f1bf8da0c5ce7d2</id>
                <name><![CDATA[ 75 % Load]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
   # hil.set_contactor('Interruptible load.S1',swControl= True,swState= True)
    hil.set_contactor('Load 75 %.S1', swControl=True, swState=True)

    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
   # hil.set_contactor('Interruptible load.S1',swControl= True,swState= 
    hil.set_contactor('Load 75 %.S1', swControl=True, swState=False)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'On'
hil.set_contactor('Load 75 %.S1', swControl=True, swState=True)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>280.0</x>
                    <y>688.0</y>
                    <width>160</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>177ae8e497bb11e9afa2f8da0c5ce7d2</id>
                <name><![CDATA[50 % Load ]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    #hil.set_contactor('Interruptible load.S1',swControl= True,swState= True)
    hil.set_contactor('Load 50 %.S1', swControl=True, swState=True)

    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    #hil.set_contactor('Interruptible load.S1',swControl= True,swState= False)
    hil.set_contactor('Load 50 %.S1', swControl=True, swState=False)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'On'
hil.set_contactor('Load 50 %.S1', swControl=True, swState=True)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>632.0</y>
                    <width>144</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>13686c8097bb11e98dbdf8da0c5ce7d2</id>
                <name><![CDATA[ 25 % Load]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    hil.set_contactor('Interruptible load.S1',swControl= True,swState= True)
    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    hil.set_contactor('Interruptible load.S1',swControl= True,swState= False)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'On'
hil.set_contactor('Interruptible load.S1',swControl= True,swState= True)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[On]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>576.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>bc22fd8c97b811e9aff9f8da0c5ce7d2</id>
                <name><![CDATA[Set grid]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API

hil.set_source_sine_waveform('Grid.Vs1', rms = 12470/(3**0.5), frequency = 60.0, phase = 0.0,harmonics_pu = ())


]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers.
# HIL API


hil.set_source_sine_waveform('Grid.Vs1', rms = 12470/(3**0.5), frequency = 60.0, phase = 0.0,harmonics_pu = ())

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API



]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>56.0</x>
                    <y>656.0</y>
                    <width>152</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>bc23248797b811e98f7bf8da0c5ce7d2</id>
                <name><![CDATA[Set grid fault]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API

hil.set_source_sine_waveform('Grid.Vs1', rms = 0.5*12470/(3**0.5), frequency = 60.0, phase = 0.0,harmonics_pu = ())


]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers.
# HIL API


hil.set_source_sine_waveform('Grid.Vs1', rms = 12470/(3**0.5), frequency = 60.0, phase = 0.0,harmonics_pu = ())

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API



]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>56.0</x>
                    <y>712.0</y>
                    <width>176</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f56a308be311ea82fbf8da0c5ce7d2</id>
                <name><![CDATA[Diesel Genset]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">Diesel Genset</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[None]]></description>
                <components_ids><![CDATA[['a4f56a318be311eabae0f8da0c5ce7d2', 'a4f5911a8be311ea8110f8da0c5ce7d2', 'a4f5911b8be311ea9adaf8da0c5ce7d2', 'a4f5911c8be311eaa5e2f8da0c5ce7d2', 'a4f5911d8be311eab0d5f8da0c5ce7d2', 'a4f5b8088be311eaaf3cf8da0c5ce7d2', 'a4f5b8098be311eab6d6f8da0c5ce7d2', 'a4f5b80a8be311eaafcef8da0c5ce7d2', 'a4f5b80b8be311eaaa36f8da0c5ce7d2', 'a4f5b80c8be311eaa089f8da0c5ce7d2', 'a4f5b80d8be311ea969bf8da0c5ce7d2', 'a4f5defa8be311ea8531f8da0c5ce7d2', 'a4f5defb8be311ea9170f8da0c5ce7d2', 'a4f5defc8be311eaa5e5f8da0c5ce7d2', 'a4f5defd8be311ea9b23f8da0c5ce7d2', 'a4f5defe8be311ea8ab0f8da0c5ce7d2', 'a4f605f48be311eabc8bf8da0c5ce7d2', 'a4f605f58be311ea860ef8da0c5ce7d2', 'a4f605f68be311eaabf9f8da0c5ce7d2', 'a4f605f78be311ea9b1bf8da0c5ce7d2', 'a4f605f88be311eaa76ef8da0c5ce7d2', 'a4f605f98be311ea96faf8da0c5ce7d2', 'a4f605fa8be311ea9238f8da0c5ce7d2', 'a4f62ce68be311eaba7ef8da0c5ce7d2', 'a4f62ce78be311ea81c9f8da0c5ce7d2', 'a4f62ce88be311ea8ff4f8da0c5ce7d2', 'a4f62ce98be311eab49bf8da0c5ce7d2', 'a4f62cea8be311ea9975f8da0c5ce7d2', 'a4f62ceb8be311eaa289f8da0c5ce7d2', 'a4f653dc8be311eaaafef8da0c5ce7d2', 'a4f653dd8be311eabd59f8da0c5ce7d2', 'a4f653de8be311eab5f8f8da0c5ce7d2', 'a4f653df8be311ea8f2df8da0c5ce7d2', 'a4f653e08be311ea87cbf8da0c5ce7d2', 'a4f67ad28be311ea90bcf8da0c5ce7d2', 'a4f67ad38be311ea9316f8da0c5ce7d2', 'a4f6c8bb8be311ea95b7f8da0c5ce7d2', '342168b88c1511ea9f9ef8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\..\typhoon hil control center\examples\models\microgrid\diesel_genset\diesel_genset.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "Diesel_Gen."
path_to_inputs = "DG_in."
path_to_outputs = "DG_out."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 0.07  # MVA
fb = 60  # Hz
pms = 2  # number of pole pairs
wb = fb*60/pms  # RPM
Vtb = 208.0  # V]]></initialization_code>
                <widget_settings>
                    <x>992.0</x>
                    <y>800.0</y>
                    <width>144</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f56a318be311eabae0f8da0c5ce7d2</id>
                <name><![CDATA[Vt]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#x = hil.read_analog_signal(name = path_to_component + "Control.Exciter.Vt")
x = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Control.Exciter.Vt')


displayValue = x


]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Control.Exciter.Vt']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>288.0</x>
                    <y>400.0</y>
                    <width>312</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.999</y_range_min>
                    <y_range_max>1.001</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5911a8be311ea8110f8da0c5ce7d2</id>
                <name><![CDATA[w meas]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#x = hil.read_analog_signal(name = path_to_component + "Control.Governor_and_Engine.wmeas")
x = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Control.Governor_and_Engine.wmeas')


displayValue = x

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Control.Governor_and_Engine.wmeas']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>8.0</x>
                    <y>400.0</y>
                    <width>312</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1.1</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5911b8be311ea9adaf8da0c5ce7d2</id>
                <name><![CDATA[Synch Check]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

import math
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
#V1 = hil.read_analog_signal(name = path_to_component + "Sync_Check.PLLs.V_grid")
V1 = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Sync_Check.PLLs.V_grid')

#V2 = hil.read_analog_signal(name = path_to_component + "Sync_Check.PLLs.V_gen")
V2 = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Sync_Check.PLLs.V_gen')

#phase = 180*hil.read_analog_signal(name = path_to_component + "Sync_Check.check_phase_diff.phase_diff")/math.pi
phase = 180*hil.read_analog_signal(name='Back-Up.Diesel_Gen.Sync_Check.check_phase_diff.phase_diff')/math.pi



if V1>0:
    alpha = 0
    beta = phase
else:
    alpha = 180
    beta = phase + 180
    


displayValue = [['Vref',alpha,abs(V1)],['Vgen1',beta,abs(V2)]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[Back-Up.DG_out.Out[0]]]></magnitude_signal>
                        <phase_signal><![CDATA[Back-Up.DG_out.Out[0]]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>560.0</x>
                    <y>0.0</y>
                    <width>304</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5911c8be311eaa5e2f8da0c5ce7d2</id>
                <name><![CDATA[Phasor graph]]></name>
                <type>PhasorGraphDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

import math
# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing values
# that will be displayed
# e.g displayValue = [ ['Phasor 1 name', Phasor 1 phase, Phasor 1 magnitude],
#                      ['Phasor X name', Phasor X phase, Phasor X magnitude] ]
#S = hil.read_analog_signal(name = path_to_component + "Measurements.S")
S = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.S')
#P = hil.read_analog_signal(name = path_to_component + "Measurements.P")
P = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.P')
#Q = hil.read_analog_signal(name = path_to_component + "Measurements.Q")
Q = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.Q')
theta = 180*math.atan2(Q,P)/math.pi
#S = (P**2+Q**2)**(1.0/2.0)


if P>0:
    alpha = 0
else:
    alpha = 180
    
if Q>0:
    beta = 90
else:
    beta = 270

displayValue = [['S',theta,abs(Sb*S)],['P',alpha,abs(Sb*P)],['Q',beta,abs(Sb*Q)]]

]]></code>
                <signals><![CDATA[]]></signals>
                <updateRate>1000</updateRate>
                <background_color>#ffffff</background_color>
                <hierarchy_position>2</hierarchy_position>
                <phasors_data>
                    <phasor>
                        <display_name><![CDATA[Phasor [Double click to edit]]]></display_name>
                        <magnitude_signal><![CDATA[Back-Up.DG_out.Out[0]]]></magnitude_signal>
                        <phase_signal><![CDATA[Back-Up.DG_out.Out[0]]]></phase_signal>
                    </phasor>
                    </phasors_data>
                <widget_settings>
                    <x>392.0</x>
                    <y>0.0</y>
                    <width>248</width>
                    <height>216</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <range_max>20.0</range_max>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5911d8be311eab0d5f8da0c5ce7d2</id>
                <name><![CDATA[w ref [RPM]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


#hil.set_scada_input_value(path_to_inputs + 'wref', inputValue/wb)

hil.set_scada_input_value('Back-Up.DG_in.wref', inputValue/wb)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
widgetValue = wb
hil.set_scada_input_value(path_to_inputs + 'wref', 1)

hil.set_scada_input_value('Back-Up.DG_in.wref', 1)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1800.0]]></inputValue>
                <min>0.0</min>
                <max>2000.0</max>
                <step>1.0</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>488.0</x>
                    <y>216.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b8088be311eaaf3cf8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#P = hil.read_analog_signal(name = path_to_component + "Measurements.P")
P = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.P')

displayValue = P*Sb*1000


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[KW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>16.0</x>
                    <y>144.0</y>
                    <width>120</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b8098be311eab6d6f8da0c5ce7d2</id>
                <name><![CDATA[Frequency Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.f_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.f_match')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>280.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b80a8be311eaafcef8da0c5ce7d2</id>
                <name><![CDATA[Grid Forming Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.GridForming]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.GridForming')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>280.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b80b8be311eaaa36f8da0c5ce7d2</id>
                <name><![CDATA[PQ Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.PQ_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Read_Control_mode.PQ_mode')

displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>352.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b80c8be311eaa089f8da0c5ce7d2</id>
                <name><![CDATA[Phase Match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Phase_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.Phase_match')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>304.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5b80d8be311ea969bf8da0c5ce7d2</id>
                <name><![CDATA[MCB Closed]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.MCB_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.MCB_fb')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>336.0</x>
                    <y>208.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5defa8be311ea8531f8da0c5ce7d2</id>
                <name><![CDATA[Exciter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Exciter_on]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Exciter_on')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>232.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5defb8be311ea9170f8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#w = hil.read_analog_signal(name = path_to_component + "Control.Exciter.Vt")
w =hil.read_analog_signal(name='Back-Up.Diesel_Gen.Control.Exciter.Vt')

displayValue = w*Vtb
]]></code>
                <signal_name><![CDATA[DIESEL GENSET.Control.Exciter1.Vf]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>200.0</x>
                    <y>0.0</y>
                    <width>192</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>800.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f5defc8be311eaa5e5f8da0c5ce7d2</id>
                <name><![CDATA[Operation Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'StandBy':
    # do something when 'Case 1' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 0.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_OP_mode', 0.0)


    pass
elif inputValue == 'Grid Following':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 1.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_OP_mode', 1.0)


    pass
elif inputValue == 'Grid Forming':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 2.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_OP_mode', 2.0)

    pass]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

widgetValue = "StandBy"
#hil.set_scada_input_value(path_to_inputs + 'Gen_OP_mode', 0.0)
hil.set_scada_input_value('Back-Up.DG_in.Gen_OP_mode', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[StandBy]]></inputValue>
                <availableValues><![CDATA[['StandBy', 'Grid Following', 'Grid Forming']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>336.0</x>
                    <y>344.0</y>
                    <width>200</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5defd8be311ea9b23f8da0c5ce7d2</id>
                <name><![CDATA[Breaker command]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Contactor_Control.GCB_cmd]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.Contactor_Control.GCB_cmd')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>208.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f5defe8be311ea8ab0f8da0c5ce7d2</id>
                <name><![CDATA[Control Mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Vf':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 0.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_Control_Mode', 0.0)

    pass
elif inputValue == 'PV':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 1.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_Control_Mode', 1.0)

    pass
elif inputValue == 'P - pf':
    # do something when 'Case 3' is selected
   # hil.set_scada_input_value(path_to_inputs + 'Gen_Control_Mode', 2.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_Control_Mode', 2.0)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


if inputValue == 'PV':
    # do something when 'Case 2' is selected
    hil.set_cp_input_value('User defined', 'Genset', 'Q_Control_Mode', 0.0)
    pass
elif inputValue == 'PQ':
    # do something when 'Case 3' is selected
    hil.set_cp_input_value('User defined', 'Genset', 'Q_Control_Mode', 1.0)
    pass

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Macro code]]></on_start_code_source>
                <inputValue><![CDATA[P - pf]]></inputValue>
                <availableValues><![CDATA[['Vf', 'PV', 'P - pf']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>336.0</x>
                    <y>288.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f48be311eabc8bf8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#S = hil.read_analog_signal(name = path_to_component + "Measurements.S")
S = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.S')
displayValue = S*Sb*1000


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[KVA]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>280.0</x>
                    <y>144.0</y>
                    <width>128</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f58be311ea860ef8da0c5ce7d2</id>
                <name><![CDATA[Gen On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Gen_On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Gen_On')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>208.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f68be311eaabf9f8da0c5ce7d2</id>
                <name><![CDATA[Vf Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.Vf_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Read_Control_mode.Vf_mode')

displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>304.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f78be311ea9b1bf8da0c5ce7d2</id>
                <name><![CDATA[Breaker control]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Contactor_Control.GCB_control]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.Contactor_Control.GCB_control')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>352.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f88be311eaa76ef8da0c5ce7d2</id>
                <name><![CDATA[Gen]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'On':
    # do something when 'Case 1' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_On', 1.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_On', 1.0)

    pass
elif inputValue == 'Off':
    # do something when 'Case 2' is selected
    #hil.set_scada_input_value(path_to_inputs + 'Gen_On', 0.0)
    hil.set_scada_input_value('Back-Up.DG_in.Gen_On', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

widgetValue = 'Off'
hil.set_scada_input_value('Back-Up.DG_in.Gen_On', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Off]]></inputValue>
                <availableValues><![CDATA[['On', 'Off']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>344.0</x>
                    <y>248.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605f98be311ea96faf8da0c5ce7d2</id>
                <name><![CDATA[Steady State Speed]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.Speed_ss]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.Speed_ss')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>256.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f605fa8be311ea9238f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#Q = hil.read_analog_signal(name = path_to_component + "Measurements.Q")
Q = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.Q')
displayValue = Q*Sb*1000



]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[KVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>136.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f62ce68be311eaba7ef8da0c5ce7d2</id>
                <name><![CDATA[V ref [V]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

#hil.set_scada_input_value(path_to_inputs + 'Vref', inputValue/Vtb)

hil.set_scada_input_value('Back-Up.DG_in.Vref', inputValue/Vtb)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

widgetValue = Vtb
#hil.set_scada_input_value(path_to_inputs + 'Vref', 1)
hil.set_scada_input_value('Back-Up.DG_in.Vref', 1)

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <min>0.0</min>
                <max>600.0</max>
                <step>0.1</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>776.0</x>
                    <y>208.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f62ce78be311ea81c9f8da0c5ce7d2</id>
                <name><![CDATA[Speed]]></name>
                <type>Gauge</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#w = hil.read_analog_signal(name = path_to_component + "Control.Governor_and_Engine.wmeas")
w =hil.read_analog_signal(name='Back-Up.Diesel_Gen.Control.Governor_and_Engine.wmeas')

displayValue = w*wb
]]></code>
                <signal_name><![CDATA[Control.Governor_and_Diesel_Engine1.wmeas]]></signal_name>
                <unit><![CDATA[RPM]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>192</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>True</color_range>
                    <min>0.0</min>
                    <max>2000.0</max>
                    <warning_range>(1710.0, 1755.0, 1845.0, 1890.0)</warning_range>
                    <critical_range>(1500.0, 1709.0, 1891.0, 2000.0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f62ce88be311ea8ff4f8da0c5ce7d2</id>
                <name><![CDATA[PV Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.Read_Control_mode.PV_mode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.Read_Control_mode.PV_mode')

displayValue = bool(x)


]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>328.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f62ce98be311eab49bf8da0c5ce7d2</id>
                <name><![CDATA[StandBy Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.StandBy]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.StandBy')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>232.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f62cea8be311ea9975f8da0c5ce7d2</id>
                <name><![CDATA[P ref [MW]]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'


#hil.set_scada_input_value(path_to_inputs + 'Pref', inputValue/(Sb))

hil.set_scada_input_value('Back-Up.DG_in.Pref', inputValue/(Sb))

]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

#hil.set_scada_input_value(path_to_inputs + 'Pref', inputValue/(Sb))
hil.set_scada_input_value('Back-Up.DG_in.Pref', inputValue/(Sb))

]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.06000000000000007]]></inputValue>
                <min>0.0</min>
                <max>0.07</max>
                <step>0.01</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>488.0</x>
                    <y>272.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f62ceb8be311eaa289f8da0c5ce7d2</id>
                <name><![CDATA[Grid Following Mode]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Control.GridFollowing]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Control.GridFollowing')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>256.0</y>
                    <width>128</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f653dc8be311eaaafef8da0c5ce7d2</id>
                <name><![CDATA[V match]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Diesel_Gen.Sync_Check.V_match]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name='Back-Up.Diesel_Gen.Sync_Check.V_match')

displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>328.0</y>
                    <width>136</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f653dd8be311eabd59f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P =hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.P')
displayValue = P*Sb

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>616.0</x>
                    <y>408.0</y>
                    <width>296</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>0.02</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f653de8be311eab5f8f8da0c5ce7d2</id>
                <name><![CDATA[angle]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
#phase = 180*hil.read_analog_signal(name = path_to_component + "Sync_Check.check_phase_diff.phase_diff")/np.pi
phase = 180*hil.read_analog_signal(name='Back-Up.Diesel_Gen.Sync_Check.check_phase_diff.phase_diff')/np.pi
displayValue = phase


]]></code>
                <signal_name><![CDATA[angle]]></signal_name>
                <unit><![CDATA[°]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>880.0</x>
                    <y>144.0</y>
                    <width>120</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f653df8be311ea8f2df8da0c5ce7d2</id>
                <name><![CDATA[pf ref]]></name>
                <type>SliderMacro</type>
                <description><![CDATA[None]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------
global pf_ref
# NOTE: entered value is available through variable 'inputValue'

pf_ref = inputValue
#hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
hil.set_scada_input_value('Back-Up.DG_in.pf_ref', sign*pf_ref)



]]></on_use_code>
                <on_start_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL Control Panel API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------
global pf_ref
# NOTE: entered value is available through variable 'inputValue'
pf_ref = 1.0
widgetValue = pf_ref
sign = 1.0
#hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
hil.set_scada_input_value('Back-Up.DG_in.pf_ref', sign*pf_ref)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[1.0]]></inputValue>
                <min>0.7</min>
                <max>1.0</max>
                <step>0.01</step>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>776.0</x>
                    <y>264.0</y>
                    <width>288</width>
                    <height>48</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f653e08be311ea87cbf8da0c5ce7d2</id>
                <name><![CDATA[pf]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
displayValue =hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.pf')


]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32.0</x>
                    <y>624.0</y>
                    <width>296</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.999</y_range_min>
                    <y_range_max>1.001</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f67ad28be311ea90bcf8da0c5ce7d2</id>
                <name><![CDATA[pf mode]]></name>
                <type>ComboBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

global sign

# NOTE: entered value is available through variable 'inputValue'

if inputValue == 'Lead':
    # do something when 'Case 1' is selected
    sign = -1
    #hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
    hil.set_scada_input_value('Back-Up.DG_in.pf_ref', sign*pf_ref)

    pass
elif inputValue == 'Lag':
    # do something when 'Case 2' is selected
    sign = 1
    #hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
    hil.set_scada_input_value('Back-Up.DG_in.pf_ref', sign*pf_ref)

    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API


global sign
# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 'Lag'
sign = 1
#hil.set_scada_input_value(path_to_inputs + 'pf_ref', sign*pf_ref)
hil.set_scada_input_value('Back-Up.DG_in.pf_ref', sign*pf_ref)



]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[Lag]]></inputValue>
                <availableValues><![CDATA[['Lead', 'Lag']]]></availableValues>
                <unit><![CDATA[]]></unit>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>336.0</x>
                    <y>312.0</y>
                    <width>152</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a4f67ad38be311ea9316f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[None]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL Control Panel API

# NOTE: Only read functions are available from HIL Control Panel API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name='Back-Up.Diesel_Gen.Measurements.Q')
displayValue = Q*Sb

]]></code>
                <analog_signals><![CDATA[['Diesel_Gen.Measurements.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>952.0</x>
                    <y>424.0</y>
                    <width>304</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-480.0</y_range_min>
                    <y_range_max>480.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>a4f6c8bb8be311ea95b7f8da0c5ce7d2</id>
                <name><![CDATA[Note component]]></name>
                <type>TextNote</type>
                <description><![CDATA[]]></description>
                <text><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Variables used in the widgets here are defined through the sub-panel </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">namespace script.</p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">To access them, click with the right button on the sub-panel component </p>
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">and select &quot;Properties&quot;.</p></body></html>]]></text>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>600.0</x>
                    <y>832.0</y>
                    <width>352</width>
                    <height>64</height>
                    <background_color><![CDATA[#f0f0f0]]></background_color>
                    <background_type><![CDATA[Filled]]></background_type>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>342168b88c1511ea9f9ef8da0c5ce7d2</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[# HIL API is imported as 'hil'
# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value('Back-Up.Enable', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value('Back-Up.Enable', 0.0)
    pass


]]></on_use_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value('Back-Up.Enable', 1.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>608.0</x>
                    <y>344.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>807b0de4998d11eabecef8da0c5ce7d2</id>
                <name><![CDATA[Vdc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = hil.read_analog_signal(name='ESS.Battery inverter.VDC')

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>984.0</x>
                    <y>176.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>837c560a998d11eab401f8da0c5ce7d2</id>
                <name><![CDATA[Idc]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue =hil.read_analog_signal(name='ESS.Battery inverter.Idc_1')


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1184.0</x>
                    <y>176.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>0e690512998e11ea9ebcf8da0c5ce7d2</id>
                <name><![CDATA[SOC]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue =100*hil.read_analog_signal(name='ESS.Battery 1.SOC')

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1096.0</x>
                    <y>232.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>103a1022b31011eaa2a8f8da0c5ce7d2</id>
                <name><![CDATA[charging data for Bat]]></name>
                <type>StreamingSignalDataLogger</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <expression_code><![CDATA[None]]></expression_code>
                <streaming_analog_signals><![CDATA[['ESS.Battery inverter.I_Bat_Charge', 'ESS.Battery inverter.V_Bat_Charge', 'ESS.SOC']]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <execution_rate>0.0002</execution_rate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>712</x>
                    <y>440</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <data_file_settings>
                    <data_file_dir><![CDATA[./]]></data_file_dir>
                    <data_file_name><![CDATA[Battery charging data]]></data_file_name>
                    <use_panel_file_dir>True</use_panel_file_dir>
                    <data_file_format><![CDATA[csv]]></data_file_format>
                    <use_file_name_suffix><![CDATA[True]]></use_file_name_suffix>
                    <start_logging_on_sim_start><![CDATA[True]]></start_logging_on_sim_start>
                </data_file_settings>
            </component_data>
        <component_data>
                <id>0e3bcd3ab37111ea948bf8da0c5ce7d2</id>
                <name><![CDATA[Efficiency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
WH_2_HHV =39.39 #Kwh/Kg
P =  hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.w_pu')*Sb/1000
Mf =hil.read_analog_signal(name='FC_mf')
Pin_Fuel = WH_2_HHV*Mf

displayValue = 100*P/Pin_Fuel

]]></code>
                <signal_name><![CDATA[Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[1]]]></signal_name>
                <unit><![CDATA[%]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>416.0</x>
                    <y>496.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>3cd7e39cb37111ea9391f8da0c5ce7d2</id>
                <name><![CDATA[Efficiency %]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
WH_2_HHV =39.39 #Kwh/Kg
P =  hil.read_analog_signal(name='Fuel_Cell.SOFC inverter.Control.Grid_follow.w_pu')*Sb/1000
Mf =hil.read_analog_signal(name='FC_mf')
Pin_Fuel =WH_2_HHV* Mf

displayValue = 100*P/Pin_Fuel
]]></code>
                <analog_signals><![CDATA[['Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[0]', 'Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[1]', 'Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[2]', 'Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[3]', 'Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[4]', 'Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[5]']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48.0</x>
                    <y>472.0</y>
                    <width>296</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dd6bc140b37111ea919af8da0c5ce7d2</id>
                <name><![CDATA[Mass flow rate (mf)]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed

displayValue = hil.read_analog_signal(name='FC_mf')



]]></code>
                <signal_name><![CDATA[Fuel_Cell.SOFC inverter.SOFC.Fuel_Cell[3]]]></signal_name>
                <unit><![CDATA[Kg/hr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[5]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>376.0</x>
                    <y>576.0</y>
                    <width>184</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>596953b4b37a11ea8d3cf8da0c5ce7d2</id>
                <name><![CDATA[Fuel consumption]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[DG_800kW.Diesel_Gen.Measurements.Fuel consumption]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1200.0</x>
                    <y>280.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>658abdaeb37a11eaacdff8da0c5ce7d2</id>
                <name><![CDATA[Efficiency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 100*hil.read_analog_signal(name='DG_800kW.Diesel_Gen.Measurements.Efficiency')


]]></code>
                <signal_name><![CDATA[DG_800kW.Diesel_Gen.Measurements.Efficiency]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1184.0</x>
                    <y>192.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>