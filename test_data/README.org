* Test Data

This directory contains test data used for testing all KPIs that are described in the ~../docs~ folder.

Each sub-directory one or more CSV files with test data, and a script that will upload the test files into DPS.

** Usage

Running these scripts requires that Python 3 is installed, and the ~dps_client~ package is installed (see ~../dps_client~ for directions).

Once all dependencies are met, change your directory into one of the test file directories that you want to upload to
the DPS system. Then run ~upload <DATABASE_MANAGER_URL> <DATASET_NAME>~

The ~DATABASE_MANAGER_URL~ should be a URL to a currently online and accessible DPS Database Manager server.

The ~DATASET_NAME~ should be any unique identifier that you want to tag this test data with. The purpose of this identifier
is to make individual data uploads isolated. This makes it so that if an upload fails mid-upload, you can cleanly delete all
data from the upload (based off the dataset identifier) or simply change the dataset name. If there was no dataset name, and 
all signals were stored in one large pool, failed uploads could not be differentied from successful ones, and all KPI computations
in the time range of the invalid data would yield invalid results.

An example dataset name for battery data could be: ~BATTERY_12_01_2020~. This would be tagging the data with when it was uploaded.
This makes sense if you plan on uploading data on regular intervals (daily). These dataset names are displayed in the user interface,
so they should not be too cryptic. Also, any datasets that starts with ~batch_process_~ is reserved.

** Details about each test file directory
All the files have a relative time column called "Time" which is the difference in time since the data collection began. The scripts
for uploading the data to DPS use this time column to create an absolute timestamp for each datapoint (because TimescaleDB requires that 
we use absolute timestamps). To do this conversion, the scripts use a starting time of the current time, subtract it by some offset time,
and then each timestamp is created by adding the "Time" column. The typical "offset time" is one hour. So the absolute timestamps will start one
hour before the test is run, and the timestamps will continue for the duration of the file (all the file's "Time" columns are in seconds).

*** Battery

Battery data consists of two files: charge and discharge. The "Time" column is called "Timestep" is the elapsed time in seconds since the beginning 
of the data collection. It is assumed that the "BatteryDischarge" data was taken at a different absolute time than the "BatteryCharge" data. This 
makes sense because the data is supposed to be regarding one individual battery (you cannot do a discharge test and a charge test at the same 
time -- the battery is either charging or discharging not both).

The ~main.py~ Python script that uploads the data sends the discharge data at an absolute time that starts at the current time (the time you run the script) minus
1 hour. After the discharge data is sent, the script sends the charging data with an absolute time that starts at the current time minus 0.5 hour. This creates a 30
minute buffer between the data. Because the files are only ~3131 seconds long of data, this is OK. If the test were longer, you would have to increase this range.

*** Diesel Generator and Transformer

Diesel generator and transformer data is in a single file. Running the ~main.py~ Python script will upload all the data.

*** Fuel Cell

Fuel cell data is in a single file. Running the ~main.py~ Python script will upload all the data.



*** PV and Wind

PV and wind data is in a single file. Running the ~main.py~ Python script will upload all the data.

*** Water Quality

Water quality is in a single file. Running the ~main.py~ Python script will upload all the data.

*** Water Quantity

Water quantity is in two files. One file is for an inverter (this is "WaterQuantityElectricalInverter.csv") and the other is for water data (this is "WaterQuantity.csv").
