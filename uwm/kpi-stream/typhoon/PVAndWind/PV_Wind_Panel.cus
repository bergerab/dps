<ui_settings>
    <version>2.5</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()


counter = 0
counter2 = 0
counter3 = 0
wait = 1 #450 # wind speed, irradiation and capturing waiting time in seconds
wait2 = 4 #1800 #load profile waiting time in seconds
Data = [['P Pv']]

import numpy as np


# Reads csv files and put results in the array
# This function actually reads any txt file
def read_csv(file_path):
    lookup_file = open(file_path, 'r')
    calc_res = lookup_file.readlines()
    lookup_file.close()

    calc_res = np.array(calc_res).astype(float)

    return calc_res
    
# Write into the file
def write_csv(file_path, data_array):

    file = open(file_path, 'w')
    for i in range(len(data_array)):
        file.write(str(data_array[i]) + '\n')

    file.close()


# Print the path used for reading and saving files
printf(SETTINGS_DIR)

# example of calling the read_csv function

file_data = read_csv(SETTINGS_DIR + "/wind_speed.txt")
file_data2 = read_csv(SETTINGS_DIR + "/solar_isolation.txt")
]]></initialization_code>
    <components>
        <component_data>
                <id>dcbf424ca16211ea8525f8da0c5ce7d2</id>
                <name><![CDATA[Wind Power Plant KPIs]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">Wind Power Plant KPIs</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['dcbf424da16211eaa27ef8da0c5ce7d2', 'dcbf903fa16211eaa755f8da0c5ce7d2', 'dcbf9040a16211ea82e4f8da0c5ce7d2', 'dcbf9041a16211eab02bf8da0c5ce7d2', 'dcbfb72ea16211ea8abaf8da0c5ce7d2', 'dcbfb72fa16211ea9231f8da0c5ce7d2', 'dcbfb730a16211eab13bf8da0c5ce7d2', 'dcbfb731a16211eab1ebf8da0c5ce7d2', 'dcbfb732a16211ea9bb7f8da0c5ce7d2', 'dcbfb733a16211eabaa8f8da0c5ce7d2', 'dcbfb734a16211eab3d1f8da0c5ce7d2', 'dcbfb735a16211eab5e2f8da0c5ce7d2', 'dcbfb736a16211ea8053f8da0c5ce7d2', 'dcbfde24a16211eaada3f8da0c5ce7d2', 'd34c9466a23511ea8934f8da0c5ce7d2', '1736ab9aa23611eaa009f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\AppData\Roaming\typhoon\2020.1\examples\models\microgrid\wind_turbine\wind_power_plant (switching)\wind_power_plant.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "Wind Power Plant (Switching)."
path_to_inputs = "Wind_in."
path_to_outputs = "Wind_out."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 50e3 #VA
Vb = 208 #V
fb = 60.0 #Hz
Vdc = 350  # V

]]></initialization_code>
                <widget_settings>
                    <x>328</x>
                    <y>320</y>
                    <width>224</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf424da16211eaa27ef8da0c5ce7d2</id>
                <name><![CDATA[Inverter Control]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['dcbf424ea16211ea88d7f8da0c5ce7d2', 'dcbf424fa16211eaaee8f8da0c5ce7d2', 'dcbf4250a16211ea89a2f8da0c5ce7d2', 'dcbf693aa16211eabaccf8da0c5ce7d2', 'dcbf693ba16211ea9727f8da0c5ce7d2', 'dcbf693ca16211ea9cc8f8da0c5ce7d2', 'dcbf693da16211ea891af8da0c5ce7d2', 'dcbf693ea16211ea89bdf8da0c5ce7d2', 'dcbf903ea16211ea97a4f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>616.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf424ea16211ea88d7f8da0c5ce7d2</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>24.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf424fa16211eaaee8f8da0c5ce7d2</id>
                <name><![CDATA[Connect]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf4250a16211ea89a2f8da0c5ce7d2</id>
                <name><![CDATA[Connected]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "S1_fb")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>0.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf693aa16211eabaccf8da0c5ce7d2</id>
                <name><![CDATA[Enabled]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "enable")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>24.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf693ba16211ea9727f8da0c5ce7d2</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "On")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>16.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf693ca16211ea9cc8f8da0c5ce7d2</id>
                <name><![CDATA[Q mode On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Qmode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Grid_follow.Qmode")
displayValue = bool(x)
]]></code>
                <updateRate>500</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>48.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf693da16211ea891af8da0c5ce7d2</id>
                <name><![CDATA[Q mode]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>48.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf693ea16211ea89bdf8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'Q_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(path_to_inputs + 'Q_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>136.0</y>
                    <width>240</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf903ea16211ea97a4f8da0c5ce7d2</id>
                <name><![CDATA[Voltage Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'V_ref', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 208
hil.set_scada_input_value(path_to_inputs + 'V_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[V (line to line)]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>112</y>
                    <width>280</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbf903fa16211eaa755f8da0c5ce7d2</id>
                <name><![CDATA[DC_voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name = path_to_component + "Vdc")
displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Vdc]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>250</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32</x>
                    <y>0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbf9040a16211ea82e4f8da0c5ce7d2</id>
                <name><![CDATA[P [pu]]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/Sb

]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>32</x>
                    <y>600</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1.1</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")/Sb

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbf9041a16211eab02bf8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/1e3

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[KW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248</x>
                    <y>64</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb72ea16211ea8abaf8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")
displayValue = Q/1e3

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[KVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb72fa16211ea9231f8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.S")
displayValue = S/1e3

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[KVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248</x>
                    <y>120</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb730a16211eab13bf8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name = path_to_component + "Control.PLL.Vt_meas")
displayValue = V*((3.0/2.0)**0.5)]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Vt_meas]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>8.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb731a16211eab1ebf8da0c5ce7d2</id>
                <name><![CDATA[Power factor]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
pf = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.pf")
displayValue = pf

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>392.0</x>
                    <y>120.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb732a16211ea9bb7f8da0c5ce7d2</id>
                <name><![CDATA[Frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.PLL.f_meas")
displayValue = f]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.PLL.f_meas]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248.0</x>
                    <y>8.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb733a16211eabaa8f8da0c5ce7d2</id>
                <name><![CDATA[Display]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Efficiency]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1056.0</x>
                    <y>144.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb734a16211eab3d1f8da0c5ce7d2</id>
                <name><![CDATA[Trace graph]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['THD_Wd_Ia', 'THD_Wd_Ib', 'THD_Wd_Ic']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>968</x>
                    <y>216</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb735a16211eab5e2f8da0c5ce7d2</id>
                <name><![CDATA[Trace graph]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['THD_Wd_Va', 'THD_Wd_Vb', 'THD_Wd_Vc']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>976</x>
                    <y>440</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>dcbfb736a16211ea8053f8da0c5ce7d2</id>
                <name><![CDATA[Wind Speed Profile]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API

]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API

]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API

global file_data
global counter
global wait



hil.set_scada_input_value('Wind_in.wind_speed', file_data[counter])

#hil.set_scada_input_value('Wind.Controls.Wind_speed', file_data[counter])
hil.wait_sec(wait)
counter += 1

if counter>len(file_data)-1:
    counter = 0
]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48</x>
                    <y>144</y>
                    <width>136</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>dcbfde24a16211eaada3f8da0c5ce7d2</id>
                <name><![CDATA[Display]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Analog signal</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
displayValue = 0.0

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.wind_speed]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>368</x>
                    <y>200</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>eae58fb8a16211ea9f3ef8da0c5ce7d2</id>
                <name><![CDATA[Set grid]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API



]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers.
# HIL API


hil.set_source_sine_waveform('Vs1', rms = 4160/(3**0.5), frequency = 60.0, phase = 0.0,harmonics_pu = ())

]]></on_start_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API



]]></on_timer_code>
                <run_each>250</run_each>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>1</hierarchy_position>
                <widget_settings>
                    <x>344.0</x>
                    <y>232.0</y>
                    <width>152</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>fc0fd30ca16211ea9d0bf8da0c5ce7d2</id>
                <name><![CDATA[Capture/Scope]]></name>
                <type>Capture/Scope</type>
                <description><![CDATA[]]></description>
                <hierarchy_position>1</hierarchy_position>
                <working_mode>windowed</working_mode>
                <widget_settings>
                    <x>560</x>
                    <y>184</y>
                    <width>120</width>
                    <height>120</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <state>Scope</state>
                    <layout>None</layout>
                    <presets>
                        <active_capture_preset>Default</active_capture_preset>
                        <active_scope_preset>Default</active_scope_preset>
                        <capture name="Default">
                            <time_interval>0.01</time_interval>
                            <sample_rate>200000.0</sample_rate>
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <analog_signals>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>-1</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>None</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>0.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                            <plotting_options in_use="False">
                                <subplots>
                                    </subplots>
                            </plotting_options>
                        </capture>
                        <scope name="Default">
                            <background_color>white</background_color>
                            <layout>Vertical</layout>
                            <legend>True</legend>
                            <show_viewports>4</show_viewports>
                            <decimation>3</decimation>
                            <time_base>0.005</time_base>
                            <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>PV_Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>PV_Ib</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>PV_Ic</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>PV_Va</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>PV_Vb</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>PV_Vc</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Wd_Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Wd_Ib</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Wd_Ic</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Wd_Va</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Wd_Vb</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Wd_Vc</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>
                            <digital_signals>
                            </digital_signals>
                            <trigger>
                                <device>0</device>
                                <is_force>False</is_force>
                                <type>Analog</type>
                                <source>PV_Ia</source>
                                <edge>Rising edge</edge>
                                <treshold>0.0</treshold>
                                <offset>50.0</offset>
                                <useFirstTrigger>False</useFirstTrigger>
                            </trigger>
                        </scope>
                        </presets>
                    <capture>
                        <time_interval>0.01</time_interval>
                        <sample_rate>200000.0</sample_rate>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <type>Analog</type>
                            <source>None</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>0.0</offset>
                            <useFirstTrigger>False</useFirstTrigger>
                        </trigger>

                        <analog_signals>
                            </analog_signals>

                         <digital_signals>
                            </digital_signals>

                    </capture>

                    <scope>
                        <time_base>0.005 </time_base>
                        <background_color>white</background_color>
                        <layout>Vertical</layout>
                        <legend>True</legend>
                        <trigger>
                            <mode>Auto</mode>
                            <type>Analog</type>
                            <source>PV_Ia</source>
                            <edge>Rising edge</edge>
                            <treshold>0.0</treshold>
                            <offset>50.0</offset>
                        </trigger>

                         <analog_signals>
                            <analog>
                            <channel>0</channel>
                            <name>PV_Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>1</channel>
                            <name>PV_Ib</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>2</channel>
                            <name>PV_Ic</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>4</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>3</channel>
                            <name>PV_Va</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>4</channel>
                            <name>PV_Vb</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>5</channel>
                            <name>PV_Vc</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>3</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>6</channel>
                            <name>Wd_Ia</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>7</channel>
                            <name>Wd_Ib</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>8</channel>
                            <name>Wd_Ic</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>2</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>9</channel>
                            <name>Wd_Va</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>10</channel>
                            <name>Wd_Vb</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            <analog>
                            <channel>11</channel>
                            <name>Wd_Vc</name>
                            <is_locked>False</is_locked>
                            <vertical_scale>Auto</vertical_scale>
                            <vertical_offset>0</vertical_offset>
                            <coupling>False</coupling>
                            <viewports>
                                
                                <num_viewport>1</num_viewport>
                                
                           </viewports>
                        </analog>
                            </analog_signals>

                        <digital_signals>
                            </digital_signals>

                    </scope>
                    <plotting_options in_use="False">
                    
                        <subplots>
                            </subplots>
                    </plotting_options>
                </widget_settings>

            </component_data>
        <component_data>
                <id>d34c9466a23511ea8934f8da0c5ce7d2</id>
                <name><![CDATA[Velocity (Wind Speed)]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)

displayValue = hil.read_analog_signal(name='Wind Power Plant (Switching).Control.Grid_follow.wind_speed')

]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>16</x>
                    <y>200</y>
                    <width>264</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>50</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>1736ab9aa23611eaa009f8da0c5ce7d2</id>
                <name><![CDATA[Wind Efficiency %]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
global file_data
global counter
Density = 1.25
Area = 95.8
Velocity = file_data[counter]
Pout_W = hil.read_analog_signal(name='Wind Power Plant (Switching).Control.Grid_follow.P')

displayValue =100*(Pout_W *27)/(8*Area*Density*Velocity*Velocity*Velocity)


counter += 1

if counter>len(file_data)-1:
    counter = 0]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>16</x>
                    <y>384</y>
                    <width>264</width>
                    <height>192</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>50</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea94c58311eaa31ff8da0c5ce7d2</id>
                <name><![CDATA[PV_plant]]></name>
                <displayed_name><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
<html><head><meta name="qrichtext" content="1" /><style type="text/css">
p, li { white-space: pre-wrap; }
</style></head><body style=" font-family:'Arial'; font-size:8pt; font-weight:400; font-style:normal;">
<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:12pt;">PV_plant</span></p></body></html>]]></displayed_name>
                <name_position><![CDATA[Top]]></name_position>
                <type>SubPanel</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['16d5ea95c58311eaaa1af8da0c5ce7d2', '16d5ea96c58311ea8336f8da0c5ce7d2', '16d5ea97c58311ea9dbaf8da0c5ce7d2', '16d5ea98c58311ea9097f8da0c5ce7d2', '16d5ea99c58311ea9f0ff8da0c5ce7d2', '16d6118cc58311ea9338f8da0c5ce7d2', '16d6118dc58311ea8720f8da0c5ce7d2', '16d6118ec58311eaaa5bf8da0c5ce7d2', '16d6118fc58311eaa486f8da0c5ce7d2', '16d6119ac58311ea8e07f8da0c5ce7d2', '16d6119bc58311ea99def8da0c5ce7d2', '16d63880c58311eaaf4df8da0c5ce7d2', '16d63881c58311eaa9b4f8da0c5ce7d2', '16d63882c58311ea9f71f8da0c5ce7d2', '16d63883c58311ea8948f8da0c5ce7d2', '16d63884c58311ea9e80f8da0c5ce7d2', '16d63885c58311ea9298f8da0c5ce7d2', '16d63886c58311ea8c1af8da0c5ce7d2', '16d63887c58311eab5caf8da0c5ce7d2', '16d63888c58311eab32cf8da0c5ce7d2', '16d63889c58311eaa8d9f8da0c5ce7d2', '16d6388ac58311ea9429f8da0c5ce7d2', '16d6388bc58311eab26ff8da0c5ce7d2', '16d6388cc58311eaaa31f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>1</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <use_background_image>True</use_background_image>
                <image><![CDATA[..\..\..\..\AppData\Roaming\typhoon\2020.1\examples\models\microgrid\pv_plant\pv_plant (switching)\pv_plant.png]]></image>
                <image_scaling><![CDATA[Keep aspect ratio]]></image_scaling>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.

##########################################################################################
####################################   PATHS   ###########################################
##########################################################################################
############## When defining paths, the last "." must always be included. ################
# Paths here are defined as the full qualified name (fqn) to the desired 
# composite component. For example a composite_component inside subsystem1 
# inside subsystem2 will have fqn="subsystem2.subsystem1.composite_component.".
# Note that the path ends with a ".", since it's related to a composite
# component. By following this approach it becomes easier to locate inner
# components of the composite component.

path_to_component = "PV_Plant."
path_to_inputs = "PV_in."
path_to_outputs = "PV_out."

##########################################################################################
###############################   BASE VARIABLES   #######################################
##########################################################################################

Sb = 290e3  # VA
Vb = 208  # V
fb = 60.0  # Hz
Vdc = 350  # V]]></initialization_code>
                <widget_settings>
                    <x>600</x>
                    <y>320</y>
                    <width>232</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea95c58311eaaa1af8da0c5ce7d2</id>
                <name><![CDATA[PV_max]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/1000

]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.P']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>192</y>
                    <width>248</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>0.0</y_range_min>
                    <y_range_max>1.1</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>True</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")/Sb

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea96c58311ea8336f8da0c5ce7d2</id>
                <name><![CDATA[DC_voltage]]></name>
                <type>Gauge</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
x = hil.read_analog_signal(name='PV_Vmp_1')

displayValue = x

]]></code>
                <signal_name><![CDATA[Wind Power Plant (Switching).Vdc]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <updateRate>1000</updateRate>
                <decimals>2</decimals>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>56</x>
                    <y>0</y>
                    <width>176</width>
                    <height>136</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <min>0.0</min>
                    <max>1100.0</max>
                    <warning_range>(0, 0, 0, 0)</warning_range>
                    <critical_range>(0, 0, 0, 0)</critical_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea97c58311ea9dbaf8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
Q = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.Q")
displayValue = Q/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>64.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea98c58311ea9097f8da0c5ce7d2</id>
                <name><![CDATA[Apparent Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
S = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.S")
displayValue = S/1e6

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MVAr]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>264.0</x>
                    <y>120.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d5ea99c58311ea9f0ff8da0c5ce7d2</id>
                <name><![CDATA[Terminal Voltage]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
V = hil.read_analog_signal(name = path_to_component + "Control.PLL.Vt_meas")
displayValue = V*((3.0/2.0)**0.5)]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.Vt_meas]]></signal_name>
                <unit><![CDATA[V]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>8.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6118cc58311ea9338f8da0c5ce7d2</id>
                <name><![CDATA[Active Power]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
P = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.P")
displayValue = P/1e3

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[MW]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>264</x>
                    <y>64</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6118dc58311ea8720f8da0c5ce7d2</id>
                <name><![CDATA[Power factor]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
pf = hil.read_analog_signal(name = path_to_component + "Control.Grid_follow.pf")
displayValue = pf

]]></code>
                <signal_name><![CDATA[Generic_PV_inverter.Control.Grid_follow.P]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>408.0</x>
                    <y>120.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6118ec58311eaaa5bf8da0c5ce7d2</id>
                <name><![CDATA[Frequency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing value
# that will be displayed
f = hil.read_analog_signal(name = path_to_component + "Control.PLL.f_meas")
displayValue = f]]></code>
                <signal_name><![CDATA[Wind Turbine Front End inverter.Control.PLL.f_meas]]></signal_name>
                <unit><![CDATA[Hz]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[2]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>264.0</x>
                    <y>8.0</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6118fc58311eaa486f8da0c5ce7d2</id>
                <name><![CDATA[Inverter Control]]></name>
                <type>Group</type>
                <description><![CDATA[]]></description>
                <components_ids><![CDATA[['16d61190c58311eaac01f8da0c5ce7d2', '16d61191c58311eaafdcf8da0c5ce7d2', '16d61192c58311eaaa9bf8da0c5ce7d2', '16d61193c58311ea9b4af8da0c5ce7d2', '16d61194c58311ea8e72f8da0c5ce7d2', '16d61195c58311ea9e44f8da0c5ce7d2', '16d61196c58311ea99dff8da0c5ce7d2', '16d61197c58311eaa9e9f8da0c5ce7d2', '16d61198c58311eaa6dbf8da0c5ce7d2', '16d61199c58311ea8612f8da0c5ce7d2']]]></components_ids>
                <hierarchy_position>2</hierarchy_position>
                <canvas_bg_color>#ffffff</canvas_bg_color>
                <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts of the components owned by this widget.
# This code is always executed prior simulation start.
]]></initialization_code>
                <widget_settings>
                    <x>600.0</x>
                    <y>0.0</y>
                    <width>296</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <collapsed>False</collapsed>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61190c58311eaac01f8da0c5ce7d2</id>
                <name><![CDATA[Enable]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Enable', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>24.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61191c58311eaafdcf8da0c5ce7d2</id>
                <name><![CDATA[Connect]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = False
hil.set_scada_input_value(path_to_inputs + 'Connect', 0.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>0.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61192c58311eaaa9bf8da0c5ce7d2</id>
                <name><![CDATA[Connected]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).S1_fb]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "S1_fb")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>0.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61193c58311ea9b4af8da0c5ce7d2</id>
                <name><![CDATA[Enabled]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).enable]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "enable")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>24.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61194c58311ea8e72f8da0c5ce7d2</id>
                <name><![CDATA[Inverter On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).On]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Green</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "On")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>184.0</x>
                    <y>16.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61195c58311ea9e44f8da0c5ce7d2</id>
                <name><![CDATA[Q mode On]]></name>
                <type>LedDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <signal_name><![CDATA[Wind Power Plant (Switching).Control.Grid_follow.Qmode]]></signal_name>
                <hil_device>0</hil_device>
                <led_color>Red</led_color>
                <code><![CDATA[#----------------------- MANDATORY IMPORT --------------------------
# HIL API


# NOTE: Only read functions are available from the HIL API
#-------------------------------------------------------------------

# mandatory variable used for storing LED indicator state
# True -> On, False -> Off
x = hil.read_digital_signal(name = path_to_component + "Control.Grid_follow.Qmode")
displayValue = bool(x)
]]></code>
                <updateRate>1000</updateRate>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>88.0</x>
                    <y>48.0</y>
                    <width>88</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61196c58311ea99dff8da0c5ce7d2</id>
                <name><![CDATA[Q mode]]></name>
                <type>CheckBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'

if inputValue:
    # do something when checkbox is checked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)
    pass
else:
    # do something when checkbox is unchecked
    hil.set_scada_input_value(path_to_inputs + 'Q_mode', 0.0)
    pass

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = True
hil.set_scada_input_value(path_to_inputs + 'Q_mode', 1.0)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[True]]></inputValue>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>48.0</y>
                    <width>80</width>
                    <height>32</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61197c58311eaa9e9f8da0c5ce7d2</id>
                <name><![CDATA[Reactive Power Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'Q_ref', inputValue)
]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = 0.0
hil.set_scada_input_value(path_to_inputs + 'Q_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[0.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[kVAr ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>136.0</y>
                    <width>240</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61198c58311eaa6dbf8da0c5ce7d2</id>
                <name><![CDATA[Voltage Ref]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'V_ref', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = Vb
hil.set_scada_input_value(path_to_inputs + 'V_ref', widgetValue)
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[208.0]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[V (line to line)]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0.0</x>
                    <y>112.0</y>
                    <width>280</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d61199c58311ea8612f8da0c5ce7d2</id>
                <name><![CDATA[Irradiation]]></name>
                <type>TextBoxMacro</type>
                <description><![CDATA[]]></description>
                <on_use_code active="True"><![CDATA[#------------- MANDATORY IMPORTS ---------------
# HIL API


# Function for printing text to console (e.g printf("Hello world"))

#------------------------------------------------

# NOTE: entered value is available through variable 'inputValue'
hil.set_scada_input_value(path_to_inputs + 'Irradiation', inputValue)

]]></on_use_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

global file_data2
global counter


widgetValue = file_data2[counter]*1000.0
hil.set_scada_input_value(path_to_inputs + 'Irradiation', widgetValue)


counter += 1

if counter>len(file_data2)-1:
    counter = 0
]]></on_start_code>
                <on_stop_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.
widgetValue = None
]]></on_stop_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed periodically each 1000ms.
# NOTE: Only read functions are available from the HIL API
# HIL API



# Change widget value by setting this variable.
# NOTE: If you not specify 'widgetValue' variable or assign 'None' to it, widget value won't be changed.

# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API


global file_data2
global counter


widgetValue = file_data2[counter]*1000.0


counter += 1

if counter>len(file_data2)-1:
    counter = 0

]]></on_timer_code>
                <on_start_code_source><![CDATA[Custom code]]></on_start_code_source>
                <inputValue><![CDATA[173.9]]></inputValue>
                <inputValueType>float</inputValueType>
                <unit><![CDATA[W/m²  ]]></unit>
                <hierarchy_position>3</hierarchy_position>
                <widget_settings>
                    <x>0</x>
                    <y>88</y>
                    <width>248</width>
                    <height>32</height>
                    <inputWidgetWidth>80</inputWidgetWidth>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d6119ac58311ea8e07f8da0c5ce7d2</id>
                <name><![CDATA[PV_array Efficiency %]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
global file_data2
global counter

Voc = 520
Isc = 970
A= 1450
S= hil.read_analog_signal(name='PV_Plant.Control.Grid_follow.irr_in')

Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')


FF = Imp*Vmp/(Voc*Isc)
displayValue = 100* (Voc*Isc*FF)/(A*S)
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>248</x>
                    <y>208</y>
                    <width>248</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6119bc58311ea99def8da0c5ce7d2</id>
                <name><![CDATA[PV_Imp]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
global file_data2
global counter

Voc = 520
Isc = 970
A= 1450
S= file_data2[counter]*1000
Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')


FF = Imp*Vmp/(Voc*Isc)
displayValue = Imp
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>16</x>
                    <y>368</y>
                    <width>248</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63880c58311eaaf4df8da0c5ce7d2</id>
                <name><![CDATA[PV_Vmp]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
global file_data2
global counter

Voc = 520
Isc = 970
A= 1450
S= file_data2[counter]*1000
Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp_1')


FF = Imp*Vmp/(Voc*Isc)
displayValue = Vmp
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>280</x>
                    <y>368</y>
                    <width>248</width>
                    <height>160</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63881c58311eaa9b4f8da0c5ce7d2</id>
                <name><![CDATA[PV_FF]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
Voc = 520
Isc = 970
Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')



displayValue = Imp*Vmp/(Voc*Isc)

]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>512</x>
                    <y>208</y>
                    <width>248</width>
                    <height>168</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63882c58311ea9f71f8da0c5ce7d2</id>
                <name><![CDATA[Fill Factor]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
Voc = 520
Isc = 970
Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')



displayValue = Imp*Vmp/(Voc*Isc)


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>500</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>608</x>
                    <y>312</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63883c58311ea8948f8da0c5ce7d2</id>
                <name><![CDATA[Irradiation Profile]]></name>
                <type>Macro</type>
                <description><![CDATA[None]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.

# HIL Control Panel API



global file_data2
global counter



hil.set_scada_input_value('PV.Controls.Irradiation', file_data2[counter]*1000.0)

counter += 1
print file_data2[counter]*1000.0

if len(file_data2)<counter:
    counter = 0]]></on_click_code>
                <on_start_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other two handlers
# HIL Control Panel API


]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.

# HIL Control Panel API


global file_data2
global counter



widgetValue = file_data2[counter]*1000.0
#hil.set_scada_input_value(path_to_inputs + 'Irradiation', widgetValue)
hil.set_scada_input_value('PV_in.Irradiation',  widgetValue)



hil.wait_sec(wait)
counter += 1

if counter>len(file_data2)-1:
    counter = 0

]]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'

]]></on_stop_code>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>48</x>
                    <y>144</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
            </component_data>
        <component_data>
                <id>16d63884c58311ea9e80f8da0c5ce7d2</id>
                <name><![CDATA[PV_max]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')
displayValue = Imp*Vmp
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>544</x>
                    <y>384</y>
                    <width>248</width>
                    <height>144</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63885c58311ea9298f8da0c5ce7d2</id>
                <name><![CDATA[Inverter_Efficiency]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
Va = hil.read_analog_signal(name='PV_Va')
Vb = hil.read_analog_signal(name='PV_Vb')
Vc = hil.read_analog_signal(name='PV_Vc')
Ia= hil.read_analog_signal(name='PV_Ia')
Ib= hil.read_analog_signal(name='PV_Ib')
Ic= hil.read_analog_signal(name='PV_Ic')
P_out = Va*Ia+Vb*Ib+Vc*Ic
Idc= hil.read_analog_signal(name='PV_Imp')
Vdc = hil.read_analog_signal(name='PV_Vmp')



Pin = Idc*Vdc

displayValue = P_out/Pin


]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>784</x>
                    <y>208</y>
                    <width>248</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>100</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63886c58311ea8c1af8da0c5ce7d2</id>
                <name><![CDATA[Irradiation (PV_S)]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['PV_Plant.Control.Grid_follow.irr_in']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>904</x>
                    <y>0</y>
                    <width>248</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>False</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63887c58311eab5caf8da0c5ce7d2</id>
                <name><![CDATA[PV Current THD]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['THD_PV_Ia', 'THD_PV_Ib', 'THD_PV_Ic']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1056</x>
                    <y>192</y>
                    <width>248</width>
                    <height>184</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63888c58311eab32cf8da0c5ce7d2</id>
                <name><![CDATA[PV Voltage THD]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Signals</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": [],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
displayValue = data
]]></code>
                <analog_signals><![CDATA[['THD_PV_Va', 'THD_PV_Vb', 'THD_PV_Vc']]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>250</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>1064</x>
                    <y>376</y>
                    <width>248</width>
                    <height>176</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[x axes]]></x_title>
                    <y_title><![CDATA[y axes]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>False</x_axis_title_enabled>
                    <y_axis_title_enabled>False</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d63889c58311eaa8d9f8da0c5ce7d2</id>
                <name><![CDATA[PV Efficiency %]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)
global file_data2
global counter

Voc = 520
Isc = 970
A= 1450
S= hil.read_analog_signal(name='PV_Plant.Control.Grid_follow.irr_in')

Imp= hil.read_analog_signal(name='PV_Imp')
Vmp = hil.read_analog_signal(name='PV_Vmp')


FF = Imp*Vmp/(Voc*Isc)
displayValue = 100* (Voc*Isc*FF)/(A*S)
]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[5]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>344</x>
                    <y>304</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6388ac58311ea9429f8da0c5ce7d2</id>
                <name><![CDATA[Inveter_Efficiency]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed
Va = hil.read_analog_signal(name='PV_Va')
Vb = hil.read_analog_signal(name='PV_Vb')
Vc = hil.read_analog_signal(name='PV_Vc')
Ia= hil.read_analog_signal(name='PV_Ia')
Ib= hil.read_analog_signal(name='PV_Ib')
Ic= hil.read_analog_signal(name='PV_Ic')
P_out = Va*Ia+Vb*Ib+Vc*Ic
Idc = hil.read_analog_signal(name='PV_Imp')
Vdc = hil.read_analog_signal(name='PV_Vmp')



Pin = Idc*Vdc

displayValue = P_out/Pin


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>880</x>
                    <y>312</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6388bc58311eab26ff8da0c5ce7d2</id>
                <name><![CDATA[P_out]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayedVa = hil.read_analog_signal(name='PV_Va')
Va = hil.read_analog_signal(name='PV_Va')
Vb = hil.read_analog_signal(name='PV_Vb')
Vc = hil.read_analog_signal(name='PV_Vc')
Ia= hil.read_analog_signal(name='PV_Ia')
Ib= hil.read_analog_signal(name='PV_Ib')
Ic= hil.read_analog_signal(name='PV_Ic')
P_out = Va*Ia+Vb*Ib+Vc*Ic
displayValue = P_out/1000

]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>1000</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>880</x>
                    <y>520</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>16d6388cc58311eaaa31f8da0c5ce7d2</id>
                <name><![CDATA[Inveter_Efficiency Best way]]></name>
                <type>DigitalDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing values
# that will be displayed
# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# mandatory variable used for storing value
# that will be displayed

P_out =hil.read_analog_signal(name='PV_Plant.Control.Grid_follow.P')

Idc = hil.read_analog_signal(name='PV_Imp')
Vdc = hil.read_analog_signal(name='PV_Vmp')



Pin = Idc*Vdc

displayValue = P_out/Pin


]]></code>
                <signal_name><![CDATA[]]></signal_name>
                <unit><![CDATA[]]></unit>
                <automatic_unit>True</automatic_unit>
                <decimals><![CDATA[4]]></decimals>
                <updateRate>250</updateRate>
                <hierarchy_position>2</hierarchy_position>
                <widget_settings>
                    <x>872</x>
                    <y>384</y>
                    <width>144</width>
                    <height>56</height>
                    <appearance><![CDATA[Flat]]></appearance>
                </widget_settings>
                <advance_widget_settings>
                    <color_range>False</color_range>
                    <green_range>(0, 0, 0, 0)</green_range>
                    <orange_range>(0, 0, 0, 0)</orange_range>
                    <red_range>(0, 0, 0, 0)</red_range>
                </advance_widget_settings>
            </component_data>
        </components>
</ui_settings>